<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>索时</title>
  
  <subtitle>欢迎你的到来</subtitle>
  <link href="https://suojifeng.github.io/atom.xml" rel="self"/>
  
  <link href="https://suojifeng.github.io/"/>
  <updated>2023-08-18T00:39:56.510Z</updated>
  <id>https://suojifeng.github.io/</id>
  
  <author>
    <name>suojifeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>脂肪肝数据的改写</title>
    <link href="https://suojifeng.github.io/2023/08/17/zhi-fang-gan-shu-ju-de-gai-xie/"/>
    <id>https://suojifeng.github.io/2023/08/17/zhi-fang-gan-shu-ju-de-gai-xie/</id>
    <published>2023-08-17T12:30:45.000Z</published>
    <updated>2023-08-18T00:39:56.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="改写成果"><a href="#改写成果" class="headerlink" title="改写成果"></a>改写成果</h1><p> 今天的主要成果是利用chatgpt对我的xlsx的脂肪肝病人数据进行了替换，根据不同指标与是否患代谢性脂肪肝之间的关联，最终选定原始指标13个，分别为：性别（gender)、体检年龄（age)、丙氨酸氨基转移酶（ALT)、天门冬氨酸氨基转移酶（AST)、γ－谷氨酰基转移酶（GGT)、总胆红素（TBIL)；尿酸（UA)、总胆固醇（TC)；甘油三酯（TG)、腰围（WC)、体重指数（BMI)、是否有糖尿病、高密度脂蛋白胆固醇（HDL-C)。各个指标的参考值、异常值占比及均值标准差。</p><p>  之前师姐给我们的数据是数字，也可以说是结构化数据吧，但是要构建时序的知识图谱还有很长的一段路要走，现在最关键的问题就是我们如何去构建这么的一个知识图谱，所以从今天开始也是做了一个尝试。</p><table><thead><tr><th>指标</th><th>参考值</th><th>异常占比</th><th>均值标准差</th></tr></thead><tbody><tr><td>性别（gender)</td><td>–</td><td>–</td><td>–</td></tr><tr><td>年龄（age)</td><td>–</td><td>–</td><td>47.42±13.82</td></tr><tr><td>ALT</td><td>0-40</td><td>12.7%</td><td>25.67±23.8</td></tr><tr><td>AST</td><td>0-40</td><td>3.6%</td><td>21.8±14.78</td></tr><tr><td>GGT</td><td>男: 11-50,女:7-32</td><td>17.4%</td><td>30.16±33.58</td></tr><tr><td>TBIL</td><td>3.4-17.1</td><td>31.6%</td><td>15.64±6.15</td></tr><tr><td>UA</td><td>男:150-38女:100-300</td><td>48.7%</td><td>349.82±90.73</td></tr><tr><td>TC</td><td>0-5.2</td><td>38.6%</td><td>5.01±0.94</td></tr><tr><td>TG</td><td>0-1.7</td><td>29.7%</td><td>1.57±1.26</td></tr><tr><td>WC</td><td>男:0-85,女:0-80</td><td>62.8%</td><td>86.59±10.67</td></tr><tr><td>BMI</td><td>0-23.9</td><td>40.3%</td><td>24.82±3.64</td></tr><tr><td>是否有糖尿病</td><td>0</td><td>10.6%</td><td>–</td></tr><tr><td>HDL-C</td><td>男:1.16-1.42，女:1.29-1.55</td><td>69.8%</td><td>1.28±0.33</td></tr></tbody></table><p>  上面的表格就是对应的处理部分，然后应用chatgpt对我的数据进行了处理。</p><p>下面是我的python代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> openpyxl<span class="token comment" spellcheck="true"># 定义文件名和输出文件名</span>input_file <span class="token operator">=</span> <span class="token string">'3 合并（脂肪肝+非脂肪肝）完整数据.xlsx'</span>output_file <span class="token operator">=</span> <span class="token string">'output1.xlsx'</span><span class="token comment" spellcheck="true"># 加载 Excel 文件</span>wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span>input_file<span class="token punctuation">)</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active<span class="token comment" spellcheck="true"># 定义替换规则函数</span>replace_rules <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token number">4</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">6</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> column_2_value <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">3.4</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">17.1</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">8</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">300</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> column_2_value <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">150</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">380</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">380</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">9</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">5.2</span> <span class="token keyword">else</span> <span class="token string">'偏高'</span><span class="token punctuation">,</span>    <span class="token number">10</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">1.7</span> <span class="token keyword">else</span> <span class="token string">'偏高'</span><span class="token punctuation">,</span>    <span class="token number">11</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">80</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> column_2_value <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">85</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">85</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">95</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">12</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">23.9</span> <span class="token keyword">else</span> <span class="token string">'偏高'</span><span class="token punctuation">,</span>    <span class="token number">14</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1.29</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">1.55</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1.55</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">1.89</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> column_2_value <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1.16</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">1.42</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1.42</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">1.77</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 缓存需要替换的单元格的值</span>replace_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    column_2_value <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value    <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        column_index <span class="token operator">=</span> cell<span class="token punctuation">.</span>column        replace_func <span class="token operator">=</span> replace_rules<span class="token punctuation">.</span>get<span class="token punctuation">(</span>column_index<span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">)</span>        replace_values<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>cell<span class="token punctuation">,</span> replace_func<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 批量替换数值</span><span class="token keyword">for</span> cell<span class="token punctuation">,</span> replace_value <span class="token keyword">in</span> replace_values<span class="token punctuation">:</span>    cell<span class="token punctuation">.</span>value <span class="token operator">=</span> replace_value<span class="token comment" spellcheck="true"># 保存修改后的 Excel 文件</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span>output_file<span class="token punctuation">)</span></code></pre><p>  openpyxl 是我第一次用这个包，字面意思，首先是读取文件中的内容，然后定义了一个替换的规则，然后因为要有根据性别的不同进行区分，所以我们进行了一个 if column_2_value &#x3D;&#x3D; 1 判断在里面，然后下面就是替换了，对于最小行的处理，下面我将会展示我的第一版是根据列进行处理的，但是还是差了一步没有解决，所以才转到了从行这里入手处理，因为是可以获得行的数据所以更好的处理。</p><pre class=" language-python"><code class="language-python"> replace_func <span class="token operator">=</span> replace_rules<span class="token punctuation">.</span>get<span class="token punctuation">(</span>column_index<span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">)</span> replace_values<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>cell<span class="token punctuation">,</span> replace_func<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>首先是对规则的应用，然后缓存替换输出，十分的漂亮。</p><p>下面是从行入手的代码，也是可以值得借鉴。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">def</span> <span class="token function">replace_column_values</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sheetname<span class="token punctuation">,</span> column_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取原始文件</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span>sheetname<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 替换列值</span>    df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">,</span> column_index<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">,</span> column_name<span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存到新文件</span>    new_filename <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.xlsx'</span><span class="token punctuation">,</span> <span class="token string">'_new1.xlsx'</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>new_filename<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"替换后的文件已保存为 &amp;#123;new_filename&amp;#125;"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用示例：</span>filename <span class="token operator">=</span> <span class="token string">'3 合并（脂肪肝+非脂肪肝）完整数据.xlsx'</span>  <span class="token comment" spellcheck="true"># 替换前的文件名</span>sheetname <span class="token operator">=</span> <span class="token string">'Sheet1'</span>   <span class="token comment" spellcheck="true"># 表格名（如果是默认的第一个表格，直接填写 Sheet1 即可）</span>column_index <span class="token operator">=</span> <span class="token number">4</span>    <span class="token comment" spellcheck="true"># 需要替换的列名</span>replace_column_values<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sheetname<span class="token punctuation">,</span> column_index<span class="token punctuation">)</span></code></pre><p>对每一列进行规则的替换，然后进行处理，上面是只处理一列的数据。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">def</span> <span class="token function">replace_column_values</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sheetname<span class="token punctuation">,</span> column_rules<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取原始文件</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span>sheetname<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历列规则</span>    <span class="token keyword">for</span> column_index<span class="token punctuation">,</span> rule <span class="token keyword">in</span> column_rules<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        column_name <span class="token operator">=</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">[</span>column_index<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 替换列值</span>        df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">,</span> column_name<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">,</span> column_name<span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>rule<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存到新文件</span>    new_filename <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.xlsx'</span><span class="token punctuation">,</span> <span class="token string">'_new.xlsx'</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>new_filename<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"替换后的文件已保存为 &amp;#123;new_filename&amp;#125;"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用示例：</span>filename <span class="token operator">=</span> <span class="token string">'3 合并（脂肪肝+非脂肪肝）完整数据.xlsx'</span>  <span class="token comment" spellcheck="true"># 替换前的文件名</span>sheetname <span class="token operator">=</span> <span class="token string">'Sheet1'</span>   <span class="token comment" spellcheck="true"># 表格名（如果是默认的第一个表格，直接填写 Sheet1 即可）</span>column_rules <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">7</span> <span class="token operator">and</span> x <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">and</span> x <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span> i    <span class="token number">6</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">3.4</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">17.1</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">and</span> x <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">300</span> <span class="token operator">and</span> x <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span>    <span class="token number">8</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">5.2</span> <span class="token keyword">else</span> <span class="token string">'偏高'</span><span class="token punctuation">,</span>    <span class="token number">9</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">1.7</span> <span class="token keyword">else</span> <span class="token string">'偏高'</span><span class="token punctuation">,</span>    <span class="token number">10</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">80</span> <span class="token operator">and</span> x <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span>     <span class="token number">11</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> df<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">23.9</span> <span class="token keyword">else</span> <span class="token string">'偏高'</span><span class="token punctuation">,</span>    <span class="token number">13</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> df<span class="token punctuation">:</span> <span class="token string">'正常'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">1.29</span> <span class="token operator">and</span> x <span class="token operator">&lt;</span> <span class="token number">1.55</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token string">'偏高'</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">1.55</span> <span class="token operator">and</span> x <span class="token operator">&lt;</span> <span class="token number">1.89</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'过高'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>column_index <span class="token operator">=</span> <span class="token number">3</span>replace_column_values<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sheetname<span class="token punctuation">,</span> column_rules<span class="token punctuation">)</span></code></pre><p>整个定义规则，然后是存储为csv文件，根据下面就可以转换</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment" spellcheck="true"># 读取XLSX文件</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'output1.xlsx'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将数据保存为CSV文件</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'disease.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;改写成果&quot;&gt;&lt;a href=&quot;#改写成果&quot; class=&quot;headerlink&quot; title=&quot;改写成果&quot;&gt;&lt;/a&gt;改写成果&lt;/h1&gt;&lt;p&gt; 今天的主要成果是利用chatgpt对我的xlsx的脂肪肝病人数据进行了替换，根据不同指标与是否患代谢性脂肪肝之间的关联，最</summary>
      
    
    
    
    <category term="dataprogress" scheme="https://suojifeng.github.io/categories/dataprogress/"/>
    
    
    <category term="knowledgeGraphs" scheme="https://suojifeng.github.io/tags/knowledgeGraphs/"/>
    
    <category term="dataprogress" scheme="https://suojifeng.github.io/tags/dataprogress/"/>
    
    <category term="python" scheme="https://suojifeng.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>neo4j学习</title>
    <link href="https://suojifeng.github.io/2023/08/17/neo4j-xue-xi/"/>
    <id>https://suojifeng.github.io/2023/08/17/neo4j-xue-xi/</id>
    <published>2023-08-17T12:26:00.000Z</published>
    <updated>2023-08-18T00:41:17.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="neo4j下载和相关问题"><a href="#neo4j下载和相关问题" class="headerlink" title="neo4j下载和相关问题"></a>neo4j下载和相关问题</h1><p>由于目前学习到知识图谱方面，neo4j也是一个经常会用到的工具，所以今天来进行稍微的学习一下，也算是作为今天的记录吧，首先是软件的安装，我下载的是neo4j Desktop</p><p>  需要注意的是，你的java版本需要很高，我是从这次升级到了17，卸载也是挺麻烦的，从网上找个教程卸载吧，</p><p>首先是从系统的卸载页面把两个和Java有关的卸载了，然后最重要的是环境变量的删除，系统变量环境变量这种</p><p>然后是删除系统文件夹中的JAVA，c盘中的Oracle和Sun文件夹，查看C:Program Files或C:Program Files (x86)下是否有相关的文件夹；最后检验cmd这种，我是没有删除注册表这种东西。</p><p>  重要的是，如果你重复卸载之后可能会出现红色的感叹号！</p><p>这种你需要解决的就是去c盘的neo4j desktop 文件夹中删除掉之前建立的project就可以。</p><h1 id="neo4j基础学习"><a href="#neo4j基础学习" class="headerlink" title="neo4j基础学习"></a>neo4j基础学习</h1><p>CREATE (:个人 {性别: ‘男’, 体检年龄:43 , 丙氨酸氨基转移酶: 正常, 天门冬氨酸氨基转移酶: 正常, γ-谷氨酰基转移酶: 正常, 总胆红素: 过高, 尿酸: 正常, 总胆固醇: 正常, 甘油三酯: 正常, 腰围: 正常, 体重指数: 正常, 是否有糖尿病: 否, 高密度脂蛋白胆固醇: 正常})</p><h2 id="1-基本的增删改查"><a href="#1-基本的增删改查" class="headerlink" title="1.基本的增删改查"></a>1.基本的增删改查</h2><p>插入节点。插入一个Person类别的节点，且这个节点有一个属性name，属性值为Andres</p><pre class=" language-python"><code class="language-python">  CREATE <span class="token punctuation">(</span>n<span class="token punctuation">:</span>Person <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;name : 'suoshi'&amp;#125;);</span></code></pre><p>插入边。插入一条a到b的有向边，且边的类别为Follow</p><pre class=" language-python"><code class="language-python">  MATCH <span class="token punctuation">(</span>a<span class="token punctuation">:</span>Person<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>b<span class="token punctuation">:</span>Person<span class="token punctuation">)</span>  WHERE a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Node A'</span> AND b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Node B'</span>  CREATE <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token punctuation">:</span>Follow<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>删除节点</p><pre class=" language-python"><code class="language-python">  MATCH <span class="token punctuation">(</span>n<span class="token punctuation">:</span>Person <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; name:'Taylor' &amp;#125;)</span>  DETACH DELETE n<span class="token punctuation">;</span></code></pre><p>更新节点。更新一个Person类别的节点，设置新的name。</p><pre class=" language-python"><code class="language-python">  MATCH <span class="token punctuation">(</span>n<span class="token punctuation">:</span>Person <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; name: 'Andres' &amp;#125;)</span>  SET n<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Taylor'</span><span class="token punctuation">;</span></code></pre><p>删除边</p><pre class=" language-python"><code class="language-python">  MATCH <span class="token punctuation">(</span>a<span class="token punctuation">:</span>Person<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>r<span class="token punctuation">:</span>Follow<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>b<span class="token punctuation">:</span>Person<span class="token punctuation">)</span>  WHERE a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Node A'</span> AND b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Node B'</span>  DELETE r<span class="token punctuation">;</span></code></pre><p>查询</p><pre class=" language-python"><code class="language-python">MATCH <span class="token punctuation">(</span>tom <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;name: "Tom Hanks"&amp;#125;) RETURN tom</span>MATCH <span class="token punctuation">(</span>people<span class="token punctuation">:</span>Person<span class="token punctuation">)</span> RETURN people<span class="token punctuation">.</span>name LIMIT <span class="token number">10</span>MATCH <span class="token punctuation">(</span>nineties<span class="token punctuation">:</span>Movie<span class="token punctuation">)</span> WHERE nineties<span class="token punctuation">.</span>released <span class="token operator">>=</span> <span class="token number">1990</span> AND nineties<span class="token punctuation">.</span>released <span class="token operator">&lt;</span> <span class="token number">2000</span> RETURN nineties<span class="token punctuation">.</span>title</code></pre><p>查询最短路径</p><pre class=" language-python"><code class="language-python">  MATCH <span class="token punctuation">(</span>ms<span class="token punctuation">:</span>Person <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; name:'Node A' &amp;#125;),(cs:Person &amp;#123; name:'Node B' &amp;#125;), p = shortestPath((ms)-[r:Follow]-(cs)) RETURN p;</span></code></pre><p>查询两个节点之间的关系</p><pre class=" language-python"><code class="language-python">  MATCH <span class="token punctuation">(</span>a<span class="token punctuation">:</span>Person <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; name:'Node A' &amp;#125;)-[r]->(b:Person &amp;#123; name:'Node B' &amp;#125;)</span>  RETURN type<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查询一个节点的所有Follower。</p><pre class=" language-python"><code class="language-python">  MATCH <span class="token punctuation">(</span><span class="token punctuation">:</span>Person <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; name:'Taylor' &amp;#125;)-[r:Follow]->(Person)</span>  RETURN Person<span class="token punctuation">.</span>name<span class="token punctuation">;</span></code></pre><h2 id="2-可以通过调用JAVA来进行使用"><a href="#2-可以通过调用JAVA来进行使用" class="headerlink" title="2.可以通过调用JAVA来进行使用"></a>2.可以通过调用JAVA来进行使用</h2><p>其实在网络上有着 springboot + neo4j的组合，我之后肯定会建一个这样的可视化系统来进行展示。</p><h3 id="Neo4j-Java-Driver"><a href="#Neo4j-Java-Driver" class="headerlink" title="Neo4j Java Driver"></a>Neo4j Java Driver</h3><p>When using Maven, add this to your <em>pom.xml</em> file:</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>driver<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token operator">&lt;</span>artifactId<span class="token operator">></span>neo4j<span class="token operator">-</span>java<span class="token operator">-</span>driver<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span>version<span class="token operator">></span>？？？<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span></code></pre><p>对于其他的构建系统来说</p><pre class=" language-JAVA"><code class="language-JAVA">import org.neo4j.driver.AuthTokens;import org.neo4j.driver.Driver;import org.neo4j.driver.GraphDatabase;import org.neo4j.driver.Query;import static org.neo4j.driver.Values.parameters;public class HelloWorldExample implements AutoCloseable &#123;    private final Driver driver;    public HelloWorldExample(String uri, String user, String password) &#123;        driver = GraphDatabase.driver(uri, AuthTokens.basic(user, password));    &#125;    @Override    public void close() throws RuntimeException &#123;        driver.close();    &#125;    public void printGreeting(final String message) &#123;        try (var session = driver.session()) &#123;            var greeting = session.executeWrite(tx -> &#123;                var query = new Query("CREATE (a:Greeting) SET a.message = $message RETURN a.message + ', from node ' + id(a)", parameters("message", message));                var result = tx.run(query);                return result.single().get(0).asString();            &#125;);            System.out.println(greeting);        &#125;    &#125;    public static void main(String... args) &#123;        try (var greeter = new HelloWorldExample("bolt://localhost:7687", "neo4j", "password")) &#123;            greeter.printGreeting("hello, world");        &#125;    &#125;&#125;</code></pre><p>下次再构建吧 可以学习的页面</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;neo4j下载和相关问题&quot;&gt;&lt;a href=&quot;#neo4j下载和相关问题&quot; class=&quot;headerlink&quot; title=&quot;neo4j下载和相关问题&quot;&gt;&lt;/a&gt;neo4j下载和相关问题&lt;/h1&gt;&lt;p&gt;由于目前学习到知识图谱方面，neo4j也是一个经常会用到的工</summary>
      
    
    
    
    <category term="neo4j" scheme="https://suojifeng.github.io/categories/neo4j/"/>
    
    
    <category term="knowledgeGraphs" scheme="https://suojifeng.github.io/tags/knowledgeGraphs/"/>
    
    <category term="neo4j" scheme="https://suojifeng.github.io/tags/neo4j/"/>
    
    <category term="java" scheme="https://suojifeng.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>CENET</title>
    <link href="https://suojifeng.github.io/2023/08/16/cenet/"/>
    <id>https://suojifeng.github.io/2023/08/16/cenet/</id>
    <published>2023-08-16T02:35:10.000Z</published>
    <updated>2023-08-18T06:19:38.748Z</updated>
    
    <content type="html"><![CDATA[<p>CENET 学习历史和非历史依赖来区分可以与给定查询最佳匹配的最潜在实体。</p><p>通过启动对比学习来研究当前时刻是否更多地依赖于历史或非历史事件</p><p>表示进一步帮助训练一个二元分类器，其输出是一个布尔掩码来指示搜索空间中的相关实体</p><p>之前的是多关注于周期性和重复性的事件</p><p>对于重复或周期性事件，模型预计会优先考虑一些频繁出现的实体，对于新事件，模型应该更多地关注历史交互较少的实体。</p><p>历史和非历史实体，通过对比学习确认</p><p>(𝑠, 𝑟, ?, 𝑡 )</p><p>首先采用基于复制机制的评分策略对历史和非历史事件的依赖性进行建模。（基于复制机制的评分机制是一种通过为数据副本赋予权重或分数来管理分布式系统中数据复制和访问的方法，以提供高可用性、容错性和性能优化。）</p><p>突出贡献：</p><p>1.提出了CENET,不仅可以通过联合调查历史和非历史信息来预测重复和周期性事件，还可以预测潜在的新事件；</p><p>2.引用了对比学习来来分辨高相关的实体</p><p>对比学习损失函数</p><p><img src="/2023/08/16/cenet/CENET.png" alt="CENET结构图"></p><h1 id="METHOD"><a href="#METHOD" class="headerlink" title="METHOD"></a>METHOD</h1><h2 id="1-预设参数"><a href="#1-预设参数" class="headerlink" title="1.预设参数"></a>1.预设参数</h2><p>我们将粗体<strong>s,p, o</strong> 分别用于 s、p 和 o 的嵌入向量，其维度为 d。E 是所有实体的嵌入，其行表示实体的嵌入向量，例如 s 和 o。类似地，P是所有关系类型的嵌入。</p><p>对于给定query(𝑠, 𝑟, ?, 𝑡 )，我们设定<br>$$<br>\mathcal{D}<em>{t}^{s,p}<br>$$<br>为历史事件集合<br>$$<br>\mathcal{H}</em>{t}^{s,p}<br>$$<br>为相关历史实体的集合<br>$$<br>{(s,p,o’,k)|o’\not\in\mathcal{H}<em>{t}^{s,p},k&lt;t}<br>$$<br>表示非历史事件的集合，其中 G 中可能不存在一些四元组。如果一个事件 (s, p, o, t) 本身在其对应的<br>$$<br>\mathcal{D}</em>{t}^{s,p}<br>$$<br> 中不存在，那么它是一个新事件。不失一般性，我们详细介绍了 CENET 如何在给定查询 q &#x3D; (s, p,？, t) 在以下部分。<br>$$<br>\mathcal{L}_{i,j}&#x3D;-\log\frac{exp(\mathbf{z}_i\cdot\mathbf{z}<em>j&#x2F;\tau)}{\sum</em>{k&#x3D;1,k\neq i}^{2N}exp(\mathbf{z}_i\cdot\mathbf{z}_k&#x2F;\tau)}<br>$$</p><p>$$<br>\mathcal{D}<em>{t}^{s,p}&#x3D;\bigcup</em>{k&lt;t}{(s,p,o,k)\in\mathcal{G}_{k}},<br>$$</p><p>$$<br>\mathcal{H}<em>{t}^{s,p}&#x3D;{o|(s,p,o,k)\in\mathcal{D}</em>{t}^{s,p}}.<br>$$</p><p>$$<br>{(s,p,o’,k)|o’\not\in\mathcal{H}_{t}^{s,p},k&lt;t}<br>$$</p><p>$$<br>\mathbf{F}<em>{t}^{s,p}(o)&#x3D;\sum</em>{k&lt;t}|{o|(s,p,o,k)\in\mathcal{G}_{k}}|.<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CENET 学习历史和非历史依赖来区分可以与给定查询最佳匹配的最潜在实体。&lt;/p&gt;
&lt;p&gt;通过启动对比学习来研究当前时刻是否更多地依赖于历史或非历史事件&lt;/p&gt;
&lt;p&gt;表示进一步帮助训练一个二元分类器，其输出是一个布尔掩码来指示搜索空间中的相关实体&lt;/p&gt;
&lt;p&gt;之前的是多</summary>
      
    
    
    
    <category term="temporal KG" scheme="https://suojifeng.github.io/categories/temporal-KG/"/>
    
    
    <category term="KG" scheme="https://suojifeng.github.io/tags/KG/"/>
    
  </entry>
  
  <entry>
    <title>My Love</title>
    <link href="https://suojifeng.github.io/2023/08/16/my-love/"/>
    <id>https://suojifeng.github.io/2023/08/16/my-love/</id>
    <published>2023-08-16T00:59:59.000Z</published>
    <updated>2023-08-16T00:59:59.167Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown学习</title>
    <link href="https://suojifeng.github.io/2023/08/15/markdown-xue-xi/"/>
    <id>https://suojifeng.github.io/2023/08/15/markdown-xue-xi/</id>
    <published>2023-08-15T13:00:00.000Z</published>
    <updated>2023-08-15T13:01:46.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown学习"><a href="#Markdown学习" class="headerlink" title="Markdown学习"></a>Markdown学习</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>首先是有6种标题，对应的是h1~h6</p><pre><code># h1## h2### h3#### h4##### h5###### h6</code></pre><p>即可表示标题</p><h3 id="段逻辑区块引用"><a href="#段逻辑区块引用" class="headerlink" title="段逻辑区块引用"></a>段逻辑区块引用</h3><p>Markdown其实就是一种易于编写的普通文本，只不过加入了部分渲染文本的标签而已。</p><p>最终变成html标签，分段的话则会比较简单，<strong>前后至少保留一个空行</strong></p><p>Markdown提供了一个特殊符号&gt;用于段首进行强调，被强调的文字部分将会高亮显示，即</p><blockquote><p>我爱你</p></blockquote><h3 id="插入链接或图片"><a href="#插入链接或图片" class="headerlink" title="插入链接或图片"></a>插入链接或图片</h3><p>我用的是Typora，插入图片还算简单，给出示例</p><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>点击跳转至百度<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>图片<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>upload<span class="token operator">-</span>images<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>io<span class="token operator">/</span>upload_images<span class="token operator">/</span><span class="token number">703764</span><span class="token operator">-</span>605e3cc2ecb664f6<span class="token punctuation">.</span>jpg<span class="token operator">?</span>imageMogr2<span class="token operator">/</span>auto<span class="token operator">-</span>orient<span class="token operator">/</span>strip<span class="token operator">%</span>7CimageView2<span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span>w<span class="token operator">/</span><span class="token number">1240</span><span class="token punctuation">)</span></code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown支持有序列表和无序列表两种形式：</p><ul><li><p>无序列表使用*或+或-标识</p></li><li><p>有序列表使用数字加.标识，例如：1.</p></li><li><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 黄瓜<span class="token list punctuation">*</span> 玉米<span class="token list punctuation">*</span> 茄子<span class="token list punctuation">1.</span> 黄瓜<span class="token list punctuation">2.</span> 玉米<span class="token list punctuation">3.</span> 茄子</code></pre></li></ul><p>如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格</p><ul><li><p>段落4</p><blockquote><p>我爱你</p></blockquote></li></ul><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>*** 或者 —</p><hr><hr><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h3><p>它能够轻松漂亮地插入代码。方法是，使用反引号&#96;进行包裹即可。如果是行内代码引用，使用单个反引号进行包裹</p><p><code>const x = 3 </code></p><h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><pre><code>表头|条目一|条目二:---:|:---:|:---:项目|项目一|项目二</code></pre><table><thead><tr><th align="center">表头</th><th align="center">条目一</th><th align="center">条目二</th></tr></thead><tbody><tr><td align="center">项目</td><td align="center">项目一</td><td align="center">项目二</td></tr></tbody></table><h3 id="特殊符号处理"><a href="#特殊符号处理" class="headerlink" title="特殊符号处理"></a>特殊符号处理</h3><p>Markdown使用反斜杠\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理：</p><pre class=" language-csharp"><code class="language-csharp">\   反斜线`   反引号<span class="token operator">*</span>   星号_   底线<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  花括号<span class="token punctuation">[</span><span class="token punctuation">]</span>  方括号<span class="token punctuation">(</span><span class="token punctuation">)</span>  括弧<span class="token preprocessor property">#   井字号</span><span class="token operator">+</span>   加号<span class="token operator">-</span>   减号<span class="token punctuation">.</span>   英文句点<span class="token operator">!</span>   惊叹号</code></pre><p>例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：\ &#x3D;&gt; \ 。</p><p>注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown学习&quot;&gt;&lt;a href=&quot;#Markdown学习&quot; class=&quot;headerlink&quot; title=&quot;Markdown学习&quot;&gt;&lt;/a&gt;Markdown学习&lt;/h1&gt;&lt;h2 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;head</summary>
      
    
    
    
    <category term="learning" scheme="https://suojifeng.github.io/categories/learning/"/>
    
    
    <category term="Typora" scheme="https://suojifeng.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="https://suojifeng.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>RE-GCN</title>
    <link href="https://suojifeng.github.io/2023/08/15/regcn/"/>
    <id>https://suojifeng.github.io/2023/08/15/regcn/</id>
    <published>2023-08-15T09:27:57.000Z</published>
    <updated>2023-08-18T06:18:46.831Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/08/15/regcn/image-20230815093646041.png" alt="image-20230815093646041"></p><p>考虑 KG 中并发事实之间的结构依赖关系、跨时间相邻事实的顺序模式和实体的静态属性。</p><p>考虑了所有的依赖关系</p><p><img src="/2023/08/15/regcn/image-20230815093658500.png" alt="image-20230815093658500"></p><p><img src="/2023/08/15/regcn/image-20230815093704195.png" alt="image-20230815093704195"></p><p>在时间t有指向的多关系图，V指实体集合，R表示关系，😱</p><p>剩下的表示在时间t的事实集合，他可以用4元组来表示</p><p><img src="/2023/08/15/regcn/image-20230815093715372.png" alt="image-20230815093715372"></p><p><img src="/2023/08/15/regcn/image-20230815093718556.png" alt="image-20230815093718556"></p><p>其中的意思就是这就是一个事实，即一个关系为r的事实，什么事实呢，就是s和o在t时刻的事实</p><p><img src="/2023/08/15/regcn/image-20230815093733148.png" alt="image-20230815093733148"></p><p>实体预测 (𝑠, 𝑟, ?, 𝑡 +1) (？, 𝑟, o, 𝑡 +1)</p><p>关系预测 (𝑠, ？, o, 𝑡 +1)</p><p>预测的取决于下面的</p><p><img src="/2023/08/15/regcn/image-20230815093742981.png" alt="image-20230815093742981"></p><p>Ht和Rt  用到实体和关系在t时刻的嵌入矩阵</p><p><img src="/2023/08/15/regcn/image-20230815093752542.png" alt="image-20230815093752542"></p><h1 id="REGCN-MODEL"><a href="#REGCN-MODEL" class="headerlink" title="REGCN MODEL"></a><strong>REGCN MODEL</strong></h1><p>RE-GCN 在每个时间戳、跨时间相邻事实的信息顺序模式和实体的静态属性集成到实体和关系的进化表示中。</p><p>多任务评分函数，</p><h2 id="The-Evolution-Unit"><a href="#The-Evolution-Unit" class="headerlink" title="The Evolution Unit"></a><strong>The Evolution Unit</strong></h2><p>The evolution unit consists of a relation-aware GCN, two gate recurrent components, and a static graph constraint component.</p><p><img src="/2023/08/15/regcn/image-20230815093814931.png" alt="image-20230815093814931"></p><p>a relation-aware GCN：attempts to capture the structural dependencies within the KG at each timestamp.</p><p>two gate recurrent components：model the historical KG sequence auto-regressively.</p><p>a static graph constraint component：integrates the static properties to the evolutional embeddings by adding some constraints between static embeddings and evolutional embeddings of entities.  将静态属性集成到进化嵌入中。</p><p>（具体来说，时间门循环组件和 GRU 组件相应地获得每个时间戳实体和关系的演变表示。）</p><h3 id="并发事实之间的结构依赖性"><a href="#并发事实之间的结构依赖性" class="headerlink" title="并发事实之间的结构依赖性"></a>并发事实之间的结构依赖性</h3><p><img src="/2023/08/15/regcn/image-20230815093824119.png" alt="image-20230815093824119"></p><p>$$<br>\vec{h}<em>{o,t}^{l+1}&#x3D;f\Bigg(\frac{1}{c</em>{o}}\sum_{(s,r),\exists(s,r,o)\in\mathcal{E}<em>{t}}\mathbf{W}</em>{1}^{l}(\vec{h}<em>{s,t}^{l}+\vec{r}</em>{t})+\mathbf{W}<em>{2}^{l}\vec{h}</em>{o,t}^{l}\Bigg),<br>$$<br><img src="/2023/08/15/regcn/image-20230815093831448.png" alt="image-20230815093831448"></p><h3 id="时间相邻事实的顺序模式"><a href="#时间相邻事实的顺序模式" class="headerlink" title="时间相邻事实的顺序模式"></a>时间相邻事实的顺序模式</h3><p>包含时间相邻事实信息的一种直接有效的方法是使用输出实体嵌入矩阵</p><p>$$<br>\vec{h}_{o,t-1}^\omega,<br>$$<br>建模这个t-1时刻的相邻事实</p><p>潜在的顺序模式是通过堆叠层关系感知 GCN 来建模的。</p><p>可能会导致梯度消失问题，因此采用时间门控循环来解决问题</p><p><img src="/2023/08/15/regcn/image-20230815093834678.png" alt="image-20230815093834678"></p><p>当前时间戳实体嵌入矩阵和上一个时间戳的</p><p>$$<br>\mathrm{U}_t&#x3D;\sigma(\mathrm{W}<em>4\mathrm{H}</em>{t-1}+\mathrm{b}),\quad\quad\quad\quad\quad(5)<br>$$</p><p>𝜎 (·) is the sigmoid function and W4 ∈ R𝑑×𝑑 is the weight matrix of the time gate.</p><p>因为是不断进化的，所以关系矩阵又会有变化</p><p><img src="/2023/08/15/regcn/image-20230815103448818.png" alt="image-20230815103448818"></p><p>当前timestamp嵌入的关系矩阵收到之前关联实体的影响，因此采用 GRU 组件对关系的顺序模式进行建模。</p><p><img src="/2023/08/15/regcn/image-20230815103456664.png" alt="image-20230815103456664"></p><p>实体嵌入矩阵Ht-1</p><p><img src="/2023/08/15/regcn/image-20230815103502512.png" alt="image-20230815103502512"></p><h3 id="Static-Properties"><a href="#Static-Properties" class="headerlink" title="Static Properties"></a><strong>Static Properties</strong></h3><p>构成静态图的实体的一些静态属性可以看作是TKG的背景知识，有助于模型学习更准确的实体演化表示。因此，我们将静态图合并到进化表示的建模中。、</p><p>R-GCN  可以对多关系图进行建模，而无需对关系进行任何额外的嵌入。因此，我们采用没有自循环的 1 层 R-GCN  来获得 TKG 中实体的静态嵌入。</p><p><img src="/2023/08/15/regcn/image-20230815103528969.png" alt="image-20230815103528969"></p><p>我们将进化嵌入和同一实体的静态嵌入之间的角度限制在不超过时间戳相关阈值。随着时间的推移，它会增加，因为实体的进化嵌入的允许变量范围会随着出现越来越多的事实而持续扩展。</p><p><img src="/2023/08/15/regcn/image-20230815103535649.png" alt="image-20230815103535649"></p><p><img src="/2023/08/15/regcn/image-20230815103538544.png" alt="image-20230815103538544"></p><h2 id="Score-Functions-for-Different-Tasks"><a href="#Score-Functions-for-Different-Tasks" class="headerlink" title="Score Functions for Different Tasks"></a><strong>Score Functions for Different Tasks</strong></h2><p>选择ConvTransE[30]作为我们的解码器。ConvTransE 包含一个一维卷积层和一个全连接层。我们使用 ConvTransE (·) 来表示这两个层。然后，所有实体的概率向量为：</p><p><img src="/2023/08/15/regcn/image-20230815103555609.png" alt="image-20230815103555609"></p><h2 id="Parameter-Learning"><a href="#Parameter-Learning" class="headerlink" title="Parameter Learning"></a><strong>Parameter Learning</strong></h2><p><img src="/2023/08/15/regcn/image-20230815103621962.png" alt="image-20230815103621962"></p><p>关键： 可以更好的进化嵌入实体和关系矩阵</p><p>时间门控循环组件的必要性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/08/15/regcn/image-20230815093646041.png&quot; alt=&quot;image-20230815093646041&quot;&gt;&lt;/p&gt;
&lt;p&gt;考虑 KG 中并发事实之间的结构依赖关系、跨时间相邻事实的顺序模式和实体的静态属性。</summary>
      
    
    
    
    <category term="temporal KG" scheme="https://suojifeng.github.io/categories/temporal-KG/"/>
    
    
    <category term="KG" scheme="https://suojifeng.github.io/tags/KG/"/>
    
    <category term="Typora" scheme="https://suojifeng.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="https://suojifeng.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://suojifeng.github.io/2023/08/14/hello-world/"/>
    <id>https://suojifeng.github.io/2023/08/14/hello-world/</id>
    <published>2023-08-14T12:18:07.205Z</published>
    <updated>2023-08-14T12:18:07.205Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
