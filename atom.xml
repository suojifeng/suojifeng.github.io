<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>索时</title>
  
  <subtitle>欢迎你的到来</subtitle>
  <link href="https://suojifeng.github.io/atom.xml" rel="self"/>
  
  <link href="https://suojifeng.github.io/"/>
  <updated>2023-08-15T13:01:46.755Z</updated>
  <id>https://suojifeng.github.io/</id>
  
  <author>
    <name>suojifeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown学习</title>
    <link href="https://suojifeng.github.io/2023/08/15/markdown-xue-xi/"/>
    <id>https://suojifeng.github.io/2023/08/15/markdown-xue-xi/</id>
    <published>2023-08-15T13:00:00.000Z</published>
    <updated>2023-08-15T13:01:46.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown学习"><a href="#Markdown学习" class="headerlink" title="Markdown学习"></a>Markdown学习</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>首先是有6种标题，对应的是h1~h6</p><pre><code># h1## h2### h3#### h4##### h5###### h6</code></pre><p>即可表示标题</p><h3 id="段逻辑区块引用"><a href="#段逻辑区块引用" class="headerlink" title="段逻辑区块引用"></a>段逻辑区块引用</h3><p>Markdown其实就是一种易于编写的普通文本，只不过加入了部分渲染文本的标签而已。</p><p>最终变成html标签，分段的话则会比较简单，<strong>前后至少保留一个空行</strong></p><p>Markdown提供了一个特殊符号&gt;用于段首进行强调，被强调的文字部分将会高亮显示，即</p><blockquote><p>我爱你</p></blockquote><h3 id="插入链接或图片"><a href="#插入链接或图片" class="headerlink" title="插入链接或图片"></a>插入链接或图片</h3><p>我用的是Typora，插入图片还算简单，给出示例</p><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>点击跳转至百度<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>图片<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>upload<span class="token operator">-</span>images<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>io<span class="token operator">/</span>upload_images<span class="token operator">/</span><span class="token number">703764</span><span class="token operator">-</span>605e3cc2ecb664f6<span class="token punctuation">.</span>jpg<span class="token operator">?</span>imageMogr2<span class="token operator">/</span>auto<span class="token operator">-</span>orient<span class="token operator">/</span>strip<span class="token operator">%</span>7CimageView2<span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span>w<span class="token operator">/</span><span class="token number">1240</span><span class="token punctuation">)</span></code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown支持有序列表和无序列表两种形式：</p><ul><li><p>无序列表使用*或+或-标识</p></li><li><p>有序列表使用数字加.标识，例如：1.</p></li><li><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 黄瓜<span class="token list punctuation">*</span> 玉米<span class="token list punctuation">*</span> 茄子<span class="token list punctuation">1.</span> 黄瓜<span class="token list punctuation">2.</span> 玉米<span class="token list punctuation">3.</span> 茄子</code></pre></li></ul><p>如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格</p><ul><li><p>段落4</p><blockquote><p>我爱你</p></blockquote></li></ul><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>*** 或者 —</p><hr><hr><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h3><p>它能够轻松漂亮地插入代码。方法是，使用反引号&#96;进行包裹即可。如果是行内代码引用，使用单个反引号进行包裹</p><p><code>const x = 3 </code></p><h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><pre><code>表头|条目一|条目二:---:|:---:|:---:项目|项目一|项目二</code></pre><table><thead><tr><th align="center">表头</th><th align="center">条目一</th><th align="center">条目二</th></tr></thead><tbody><tr><td align="center">项目</td><td align="center">项目一</td><td align="center">项目二</td></tr></tbody></table><h3 id="特殊符号处理"><a href="#特殊符号处理" class="headerlink" title="特殊符号处理"></a>特殊符号处理</h3><p>Markdown使用反斜杠\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理：</p><pre class=" language-csharp"><code class="language-csharp">\   反斜线`   反引号<span class="token operator">*</span>   星号_   底线<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  花括号<span class="token punctuation">[</span><span class="token punctuation">]</span>  方括号<span class="token punctuation">(</span><span class="token punctuation">)</span>  括弧<span class="token preprocessor property">#   井字号</span><span class="token operator">+</span>   加号<span class="token operator">-</span>   减号<span class="token punctuation">.</span>   英文句点<span class="token operator">!</span>   惊叹号</code></pre><p>例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：\ &#x3D;&gt; \ 。</p><p>注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown学习&quot;&gt;&lt;a href=&quot;#Markdown学习&quot; class=&quot;headerlink&quot; title=&quot;Markdown学习&quot;&gt;&lt;/a&gt;Markdown学习&lt;/h1&gt;&lt;h2 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;head</summary>
      
    
    
    
    <category term="learning" scheme="https://suojifeng.github.io/categories/learning/"/>
    
    
    <category term="Typora" scheme="https://suojifeng.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="https://suojifeng.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>RE-GCN</title>
    <link href="https://suojifeng.github.io/2023/08/15/regcn/"/>
    <id>https://suojifeng.github.io/2023/08/15/regcn/</id>
    <published>2023-08-15T09:27:57.000Z</published>
    <updated>2023-08-15T13:38:50.770Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093646041.png" alt="image-20230815093646041"></p><p>考虑 KG 中并发事实之间的结构依赖关系、跨时间相邻事实的顺序模式和实体的静态属性。</p><p>考虑了所有的依赖关系</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093658500.png" alt="image-20230815093658500"></p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093704195.png" alt="image-20230815093704195"></p><p>在时间t有指向的多关系图，V指实体集合，R表示关系，😱</p><p>剩下的表示在时间t的事实集合，他可以用4元组来表示</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093715372.png" alt="image-20230815093715372"></p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093718556.png" alt="image-20230815093718556"></p><p>其中的意思就是这就是一个事实，即一个关系为r的事实，什么事实呢，就是s和o在t时刻的事实</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093733148.png" alt="image-20230815093733148"></p><p>实体预测 (𝑠, 𝑟, ?, 𝑡 +1) (？, 𝑟, o, 𝑡 +1)</p><p>关系预测 (𝑠, ？, o, 𝑡 +1)</p><p>预测的取决于下面的</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093742981.png" alt="image-20230815093742981"></p><p>Ht和Rt  用到实体和关系在t时刻的嵌入矩阵</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093752542.png" alt="image-20230815093752542"></p><h1 id="REGCN-MODEL"><a href="#REGCN-MODEL" class="headerlink" title="REGCN MODEL"></a><strong>REGCN MODEL</strong></h1><p>RE-GCN 在每个时间戳、跨时间相邻事实的信息顺序模式和实体的静态属性集成到实体和关系的进化表示中。</p><p>多任务评分函数，</p><h2 id="The-Evolution-Unit"><a href="#The-Evolution-Unit" class="headerlink" title="The Evolution Unit"></a><strong>The Evolution Unit</strong></h2><p>The evolution unit consists of a relation-aware GCN, two gate recurrent components, and a static graph constraint component.</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093814931.png" alt="image-20230815093814931"></p><p>a relation-aware GCN：attempts to capture the structural dependencies within the KG at each timestamp.</p><p>two gate recurrent components：model the historical KG sequence auto-regressively.</p><p>a static graph constraint component：integrates the static properties to the evolutional embeddings by adding some constraints between static embeddings and evolutional embeddings of entities.  将静态属性集成到进化嵌入中。</p><p>（具体来说，时间门循环组件和 GRU 组件相应地获得每个时间戳实体和关系的演变表示。）</p><h3 id="并发事实之间的结构依赖性"><a href="#并发事实之间的结构依赖性" class="headerlink" title="并发事实之间的结构依赖性"></a>并发事实之间的结构依赖性</h3><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093824119.png" alt="image-20230815093824119"></p><p>$$<br>\vec{h}<em>{o,t}^{l+1}&#x3D;f\Bigg(\frac{1}{c</em>{o}}\sum_{(s,r),\exists(s,r,o)\in\mathcal{E}<em>{t}}\mathbf{W}</em>{1}^{l}(\vec{h}<em>{s,t}^{l}+\vec{r}</em>{t})+\mathbf{W}<em>{2}^{l}\vec{h}</em>{o,t}^{l}\Bigg),<br>$$<br><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093831448.png" alt="image-20230815093831448"></p><h3 id="时间相邻事实的顺序模式"><a href="#时间相邻事实的顺序模式" class="headerlink" title="时间相邻事实的顺序模式"></a>时间相邻事实的顺序模式</h3><p>包含时间相邻事实信息的一种直接有效的方法是使用输出实体嵌入矩阵</p><p>$$<br>\vec{h}_{o,t-1}^\omega,<br>$$<br>建模这个t-1时刻的相邻事实</p><p>潜在的顺序模式是通过堆叠层关系感知 GCN 来建模的。</p><p>可能会导致梯度消失问题，因此采用时间门控循环来解决问题</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815093834678.png" alt="image-20230815093834678"></p><p>当前时间戳实体嵌入矩阵和上一个时间戳的</p><p>$$<br>\mathrm{U}_t&#x3D;\sigma(\mathrm{W}<em>4\mathrm{H}</em>{t-1}+\mathrm{b}),\quad\quad\quad\quad\quad(5)<br>$$<br>𝜎 (·) is the sigmoid function and W4 ∈ R𝑑×𝑑 is the weight matrix of the time gate.</p><p>因为是不断进化的，所以关系矩阵又会有变化</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815103448818.png" alt="image-20230815103448818"></p><p>当前timestamp嵌入的关系矩阵收到之前关联实体的影响，因此采用 GRU 组件对关系的顺序模式进行建模。</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815103456664.png" alt="image-20230815103456664"></p><p>实体嵌入矩阵Ht-1</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815103502512.png" alt="image-20230815103502512"></p><h3 id="Static-Properties"><a href="#Static-Properties" class="headerlink" title="Static Properties"></a><strong>Static Properties</strong></h3><p>构成静态图的实体的一些静态属性可以看作是TKG的背景知识，有助于模型学习更准确的实体演化表示。因此，我们将静态图合并到进化表示的建模中。、</p><p>R-GCN  可以对多关系图进行建模，而无需对关系进行任何额外的嵌入。因此，我们采用没有自循环的 1 层 R-GCN  来获得 TKG 中实体的静态嵌入。</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815103528969.png" alt="image-20230815103528969"></p><p>我们将进化嵌入和同一实体的静态嵌入之间的角度限制在不超过时间戳相关阈值。随着时间的推移，它会增加，因为实体的进化嵌入的允许变量范围会随着出现越来越多的事实而持续扩展。</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815103535649.png" alt="image-20230815103535649"></p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815103538544.png" alt="image-20230815103538544"></p><h2 id="Score-Functions-for-Different-Tasks"><a href="#Score-Functions-for-Different-Tasks" class="headerlink" title="Score Functions for Different Tasks"></a><strong>Score Functions for Different Tasks</strong></h2><p>选择ConvTransE[30]作为我们的解码器。ConvTransE 包含一个一维卷积层和一个全连接层。我们使用 ConvTransE (·) 来表示这两个层。然后，所有实体的概率向量为：</p><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815103555609.png" alt="image-20230815103555609"></p><h2 id="Parameter-Learning"><a href="#Parameter-Learning" class="headerlink" title="Parameter Learning"></a><strong>Parameter Learning</strong></h2><p><img src="/2023/08/15/regcn/REGCN%5Cimage-20230815103621962.png" alt="image-20230815103621962"></p><p>关键： 可以更好的进化嵌入实体和关系矩阵</p><p>时间门控循环组件的必要性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/08/15/regcn/REGCN%5Cimage-20230815093646041.png&quot; alt=&quot;image-20230815093646041&quot;&gt;&lt;/p&gt;
&lt;p&gt;考虑 KG 中并发事实之间的结构依赖关系、跨时间相邻事实的顺序模式和</summary>
      
    
    
    
    <category term="temporal KG" scheme="https://suojifeng.github.io/categories/temporal-KG/"/>
    
    
    <category term="Typora" scheme="https://suojifeng.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="https://suojifeng.github.io/tags/Markdown/"/>
    
    <category term="KG" scheme="https://suojifeng.github.io/tags/KG/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://suojifeng.github.io/2023/08/14/hello-world/"/>
    <id>https://suojifeng.github.io/2023/08/14/hello-world/</id>
    <published>2023-08-14T12:18:07.205Z</published>
    <updated>2023-08-14T12:18:07.205Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
