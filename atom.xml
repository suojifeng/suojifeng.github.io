<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>索时</title>
  
  <subtitle>欢迎你的到来</subtitle>
  <link href="http://suojifeng.xyz/atom.xml" rel="self"/>
  
  <link href="http://suojifeng.xyz/"/>
  <updated>2024-09-09T14:02:28.632Z</updated>
  <id>http://suojifeng.xyz/</id>
  
  <author>
    <name>suojifeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试</title>
    <link href="http://suojifeng.xyz/2024/09/09/mian-shi/"/>
    <id>http://suojifeng.xyz/2024/09/09/mian-shi/</id>
    <published>2024-09-09T07:02:49.000Z</published>
    <updated>2024-09-09T14:02:28.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程和进程的区别">1.线程和进程的区别</h3><p>进程是分配资源的最小单元，进程包括多个线程，线程其实对应的就是cpu的核心</p><p>线程是操作系统调度的最小单位，多个线程可以共享进程的资源</p><h3 id="tcp和udp的区别">2.TCP和UDP的区别</h3><p>1.TCP是需要握手连接的，udp不用直接发送数据包，但是可靠性低</p><p>2.相对来说TCP较为安全一点，需要3次握手4次回收，具有丢包重传，流量控制和拥塞控制，数据按顺序的，因为有序列号和应答号</p><p>3.udP不用去管连接的顺序和是否成功到达，需要会更进一步的优化才行，使用与视频流，在线游戏这种</p><h3 id="网页输入url整个流程">3.网页输入url整个流程</h3><p>网页上输入URl</p><p>首先我们知道 需要对这个url进行解析，我们需要知道这个 url的地址</p><p>首先就是 DNS域名解析，</p><p><strong>首先是去查看本地缓存里面有没有</strong> 没有</p><p>通过不同的根，域名，顶级解析器来获得 其中的IP地址</p><p>获得IP地址之后应该去传输了，然后是建立连接，使用TCP或者UDP,完成之后浏览器发送http的请求给服务器，（请求头，请求url，请求方法）服务器通过controller 进行处理 执行业务，然后返回对应的相应，其中包括一些响应状态码还是起他，</p><p>状态码的<strong>第一个数字表示响应类别</strong>，后面两位数字表示更详细的状态信息。</p><p>首先是 传输头分片加上MAC的地址，一起去寻找目的地</p><p>然后获得资源就是html前端页面进行渲染这样</p><h3 id="java集合类">4.java集合类</h3><p>集合类包括 list arraylist linkedlist</p><h3 id="hashmap">5.HashMap</h3><p>基于哈希表，主要是hashcode（）计算</p><p>之前是 table+ 链表 后面是 +加上红黑树</p><p>首先是检查 容量是否需要扩容， 然后查看table满了没有，然后放到链表里卖弄，满了转成红黑树，红黑树满了，扩建一般是0.75 两倍</p><p>解决哈希冲突，链表寻址法 + 开放地址（都放在一起，然后多计算几次hashcode存储）</p><p>线性探测，二次探测</p><p>再哈希法当发生冲突时，可以对哈希函数的结果进行重新哈希计算，从而找到一个新的索引位置。这种方法一般和开放地址法结合使用。</p><p>扩容 与 重哈希</p><p><strong>一致性哈希</strong>常用于分布式系统中，它将整个哈希空间视为一个环形结构，避免了数据倾斜问题。它将数据均匀分布到多个桶（节点）中，并在哈希冲突时，通过移动顺时针找到下一个节点。</p><h3 id="jvm">6. JVM</h3><h3 id="mysql如何分页分页数据量大会有什么问题如何解决">7.MySQL如何分页;分页数据量大会有什么问题;如何解决</h3><p>LIMIT page_size OFFSET offset_value;</p><p>offset_value = (page_number - 1) * page_size</p><p><strong>分页数据量大可能带来的问题</strong></p><p>当数据量较大时，使用 <code>LIMIT</code> 和 <code>OFFSET</code>进行分页会遇到以下几个问题：</p><h4 id="a.-性能问题">a. <strong>性能问题</strong></h4><ul><li><code>OFFSET</code> 会跳过前面的记录，这意味着 MySQL 需要扫描<code>OFFSET + LIMIT</code> 记录，但实际上只返回 <code>LIMIT</code>条。因此，当 <code>OFFSET</code> 值很大时，MySQL仍需要扫描大量数据，造成查询效率下降。</li><li>随着 <code>OFFSET</code>增加，查询的时间复杂度会逐渐变高，特别是在大表中，响应时间可能显著增加。</li></ul><h4 id="b.-内存消耗">b. <strong>内存消耗</strong></h4><ul><li>MySQL在执行查询时，可能会将查询结果放在内存中，特别是当没有合适的索引时。对于大数据集分页，内存消耗会显著增加，可能会影响系统性能。</li></ul><h3 id="spring设计模式有哪些">8.spring设计模式有哪些</h3><p><strong>创建型模式</strong>、<strong>结构型模式</strong>和<strong>行为型模式</strong></p><h4 id="创建型模式creational-patterns"><strong>创建型模式（CreationalPatterns）</strong></h4><p>创建型模式关注对象的创建过程，解决对象创建的复杂性，提供更灵活的对象创建方式。</p><ol type="1"><li><p><strong>工厂方法模式（Factory Method）</strong></p><ul><li>定义：通过定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法让类的实例化延迟到子类。</li><li>场景：当类不知道它所需要创建的对象的确切类型时。</li><li>例子：<code>LoggerFactory</code>根据日志类型创建不同的日志对象。</li></ul><p>在spring中 <code>BeanFactory</code> 和<code>ApplicationContext</code> 是典型的工厂模式的实现。用于创建和管理Spring Bean 实例，控制对象的创建过程，使得对象的创建与使用分离。</p><pre class="line-numbers language-none"><code class="language-none">ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");MyBean myBean = context.getBean(MyBean.class);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>抽象工厂模式（Abstract Factory）</strong></p><ul><li><p>定义：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p></li><li><p>场景：当系统需要独立于对象的具体实现来创建多个相关对象时。</p></li><li><p>例子：创建不同品牌的家具（如椅子、桌子等），具体品牌由工厂类决定。</p><p>在 Spring 中，<code>BeanFactory</code>是一个抽象工厂，负责提供一个或多个工厂接口来创建 Bean 实例。</p></li></ul></li><li><p><strong>单例模式（Singleton）</strong></p><ul><li><p>定义：确保某个类只有一个实例，并提供一个全局访问点来访问该实例。</p></li><li><p>场景：需要确保全局有且只有一个实例时，如数据库连接、日志管理器等。</p></li><li><p>例子：<code>DatabaseConnection</code>，所有访问数据库的操作共享同一个连接实例。</p><p>Spring 默认情况下 Bean 是单例的（通过<code>@Scope("singleton")</code> 声明），这意味着每个 Spring容器中只有一个实例。保证在整个应用程序中，某个类的实例只有一个，减少内存占用，避免频繁创建和销毁对象。Spring中每个默认 <code>Bean</code> 实例都是单例，生命周期由容器控制。</p></li></ul></li><li><p><strong>原型模式（Prototype）</strong></p><ul><li>定义：通过复制现有实例来创建新对象，而不是通过类实例化。</li><li>场景：当需要创建的对象是相似或重复时，避免昂贵的对象创建过程。</li><li>例子：克隆一份复杂对象，如深度复制具有复杂结构的对象。</li></ul></li><li><p><strong>建造者模式（Builder）</strong></p><ul><li>定义：将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示。</li><li>场景：需要构建复杂对象时，尤其是这些对象由多个部分组成，并且构建过程可按步骤进行。</li><li>例子：构建一个具有多种配置的房屋，建造者类按步骤创建房屋的不同部分。</li></ul></li></ol><h4 id="结构型模式">结构型模式</h4><p>结构型模式关注类与对象的组合，简化类的设计和对象之间的关系。</p><p><strong>适配器模式（Adapter）</strong></p><ul><li><p>定义：将一个类的接口转换成客户希望的另一个接口。适配器使得原本由于接口不兼容而不能一起工作的类可以一起工作。</p></li><li><p>场景：当现有的类接口与需要的接口不匹配时。</p></li><li><p>例子：电源适配器，将不同的电压接口转换成设备所需的电压。</p><p>Spring MVC 中的 <code>HandlerAdapter</code>使用了适配器模式，使不同的 <code>Controller</code>能够通过统一的接口进行调用。</p><p>适配器将不同类型的处理器（如<code>Controller</code>、<code>HttpRequestHandler</code>）适配到统一的<code>HandlerAdapter</code> 接口，简化了调用过程。</p></li></ul><p><strong>装饰者模式（Decorator）</strong></p><ul><li>定义：动态地给一个对象添加一些额外的职责。装饰者模式提供了比继承更有弹性的扩展功能的方式。</li><li>场景：需要在不修改原有类的情况下，给对象动态地添加功能。</li><li>例子：Java IO 流中的 <code>BufferedReader</code> 和<code>InputStream</code>，可以动态添加缓冲或其他功能。</li></ul><p><strong>代理模式（Proxy）</strong></p><ul><li><p>定义：为其他对象提供一种代理以控制对这个对象的访问。</p></li><li><p>场景：需要控制对象的访问、延迟加载、权限控制等。</p></li><li><p>例子：远程代理（调用远程对象时，使用本地代理对象来代表它）。</p><p>SpringAOP（面向切面编程）大量使用了代理模式来对目标对象进行增强，常见的动态代理实现包括JDK 动态代理和 CGLIB 代理。</p><p>在不修改目标对象的情况下，通过代理对象添加额外的功能，例如日志记录、事务管理、权限检查等。</p><pre class="line-numbers language-none"><code class="language-none">@Transactionalpublic void someMethod() {    // 事务处理代码由代理对象注入}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="结构型模式-1">结构型模式</h4><p><strong>策略模式（Strategy）</strong></p><ul><li>定义：定义一系列算法，将每个算法封装起来，使得它们可以互换使用。</li><li>场景：需要在运行时动态选择算法时。</li><li>例子：支付系统中，可以选择不同的支付方式（如信用卡、PayPal、银行转账等）。</li></ul><p><strong>观察者模式（Observer）</strong></p><ul><li>定义：定义对象间的一对多依赖，当一个对象的状态发生改变时，所有依赖于它的对象都能自动收到通知。</li><li>场景：对象状态变化时，自动通知所有依赖对象。</li><li>例子：GUI 中的按钮和点击事件，订阅者和发布者模式。</li></ul><h3 id="单例模式的实现">9.单例模式的实现</h3><pre class="line-numbers language-none"><code class="language-none">1.双重延迟public class Singleton {    private volatile static Singleton instance;    private Singleton(){}    public static  Singleton getInstance(){        if(instance == null){            synchronized (Singleton.class){                if(instance == null){                    instance = new Singleton();                }            }        }        return instance;    }}2.懒汉式public class Singleton {    private static Singleton instance;    private Singleton(){}    public  static  Singleton getInstance(){        if(instance == null){            instance = new Singleton();            }        return instance;    }}3.延迟加锁public class Singleton {    private static Singleton instance;    private Singleton(){}    public  synchronized static  Singleton getInstance(){        if(instance == null){            instance = new Singleton();            }        return instance;    }}4.饿汉式public class Singleton {    private static  final  Singleton instance = new Singleton();    private Singleton(){}    public  static  Singleton getInstance(){        return instance;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="selectpoll和epoll的区别">10.select、poll和epoll的区别</h3><p><code>select</code>、<code>poll</code> 和 <code>epoll</code>都是用于处理多路复用 I/O 的系统调用，它们允许一个线程同时监听多个 I/O操作，但它们的实现方式和性能特性有所不同。以下是它们的主要区别</p><p><strong><code>select</code></strong>：早期的 I/O多路复用机制，适用于少量文件描述符，但在处理大量连接时性能较差。</p><p><strong><code>poll</code></strong>：改进了 <code>select</code>的文件描述符限制问题，适用于中等规模的连接，但性能依然受限于需要遍历所有文件描述符。</p><p><strong><code>epoll</code></strong>：高效的 I/O多路复用机制，适用于大规模并发连接，提供更高的性能，但仅在 Linux上可用。</p><p><code>select</code> 使用一个集合（通常是一个<code>fd_set</code>）来跟踪要监视的文件描述符，<code>select</code>会阻塞直到至少一个文件描述符变得可读、可写或发生异常，或者超时。</p><p><code>poll</code>使用一个数组来保存需要监控的文件描述符及其事件，遍历数组，步限制文件描述符的数量</p><p><code>epoll</code>使用事件通知机制，内核维护一个事件表，并仅将有事件的文件描述符返回给应用程序。</p><h3 id="链表的形式和-应用场景">11.链表的形式和 应用场景</h3><p>链表是一种基本的数据结构，由一系列节点组成，每个节点包含数据和指向下一个节点的指针。根据不同的实现方式，链表有几种不同的类型，每种类型适用于不同的使用场景：</p><ol type="1"><li><strong>单链表（Singly Linked List）</strong><ul><li><strong>结构</strong>：每个节点包含数据和指向下一个节点的指针。</li><li><strong>优点</strong>：简单，插入和删除操作较为高效（在已知节点的情况下）。</li><li><strong>缺点</strong>：只能从头到尾单向遍历。</li><li><strong>使用场景</strong>：适用于不需要频繁反向遍历的场景，比如实现简单的数据结构（如栈和队列）。</li></ul></li><li><strong>双链表（Doubly Linked List）</strong><ul><li><strong>结构</strong>：每个节点包含数据、指向下一个节点的指针和指向前一个节点的指针。</li><li><strong>优点</strong>：可以在双向上遍历，插入和删除操作比单链表更灵活。</li><li><strong>缺点</strong>：每个节点需要额外的存储空间来保存指向前一个节点的指针。</li><li><strong>使用场景</strong>：需要双向遍历的应用，如实现双向队列（Deque）、浏览器历史记录的回溯。</li></ul></li><li><strong>循环链表（Circular Linked List）</strong><ul><li><strong>结构</strong>：在循环链表中，最后一个节点的指针指向头节点，形成一个闭环。</li><li><strong>优点</strong>：能够从任意节点开始循环遍历整个链表。</li><li><strong>缺点</strong>：需要处理循环的结束情况，可能会导致无限循环。</li><li><strong>使用场景</strong>：适用于需要循环访问链表的场景，如圆形缓冲区（环形队列）和调度算法（如RoundRobin）。</li></ul></li><li><strong>双向循环链表（Doubly Circular Linked List）</strong><ul><li><strong>结构</strong>：结合了双链表和循环链表的特性，节点既有前向和后向指针，也形成一个闭环。</li><li><strong>优点</strong>：支持双向遍历并形成循环结构。</li><li><strong>缺点</strong>：实现相对复杂，需要管理两个指针的循环。</li><li><strong>使用场景</strong>：需要双向遍历和循环访问的场景，如在应用程序中实现菜单或任务调度系统。</li></ul></li><li><strong>跳表（Skip List）</strong><ul><li><strong>结构</strong>：在链表的基础上增加了多个层次的链表来跳过部分节点，从而提高查找效率。</li><li><strong>优点</strong>：在平均情况下查找、插入和删除操作时间复杂度为O(log n)。</li><li><strong>缺点</strong>：比普通链表复杂，需额外的空间来存储多个层次的链表。</li><li><strong>使用场景</strong>：需要高效查找和插入操作的场景，如实现有序集合和数据库索引。</li></ul></li></ol><p>不同类型的链表在实际应用中根据需求的不同，提供了不同的性能特性和灵活性。选择合适的链表类型可以帮助提高程序的效率和可维护性。</p><h3 id="什么是零拷贝netty中的零拷贝">12.什么是零拷贝，netty中的零拷贝</h3><p>零拷贝（Zero-Copy）是一种优化技术，旨在<strong>减少数据在用户空间和内核空间之间的复制操作</strong>，从而提高数据传输的效率。零拷贝主要用于文件传输、网络通信等场景，可以显著减少CPU 的负载和提高 I/O 性能。</p><p>传统的数据传输流程通常包括以下步骤：</p><ol type="1"><li><strong>从文件读取数据</strong>：操作系统将数据从磁盘读入内核空间的缓冲区。</li><li><strong>用户空间的复制</strong>：操作系统将数据从内核缓冲区复制到用户空间的缓冲区。</li><li><strong>网络传输</strong>：将用户空间的缓冲区数据通过网络发送到另一端。</li></ol><p>这种过程会涉及到多次内存复制，导致性能瓶颈。零拷贝技术的目标是减少或消除这些不必要的内存复制操作。</p><p>0copy实现</p><ol type="1"><li><strong><code>mmap</code>（内存映射文件）</strong>：<ul><li>使用 <code>mmap</code>系统调用将文件映射到进程的虚拟内存空间中。这样，文件数据直接存在于内存中，无需将数据从文件系统复制到用户空间缓冲区。</li><li>通过直接访问映射的内存区域，可以避免文件 I/O操作中不必要的内存复制。</li></ul></li><li><strong><code>sendfile</code></strong>：<ul><li><code>sendfile</code>系统调用允许操作系统将文件数据直接从文件描述符发送到网络套接字，而不需要将数据复制到用户空间缓冲区。</li><li>这样可以减少内存复制和 CPU 的消耗，提高数据传输的效率。</li></ul></li><li><strong><code>splice</code></strong>：<ul><li><code>splice</code>系统调用可以在两个文件描述符之间直接移动数据，避免了数据复制到用户空间。</li><li>例如，它可以在文件描述符和套接字之间直接传输数据，适用于处理大型文件的情况。</li></ul></li></ol><h3 id="netty-的零拷贝">Netty 的零拷贝</h3><p>Netty是一个高性能的网络通信框架，它在内部使用了多种零拷贝技术来提高网络传输的效率。</p><h4 id="netty-中的零拷贝实现">Netty 中的零拷贝实现</h4><ol type="1"><li><strong><code>ByteBuf</code></strong>：<ul><li>Netty 使用 <code>ByteBuf</code> 类来处理缓冲区。<code>ByteBuf</code>支持直接缓冲区（<code>DirectByteBuf</code>）和堆内存缓冲区（<code>HeapByteBuf</code>），并提供高效的读取和写入操作。</li><li>直接缓冲区使用了<code>ByteBuffer.allocateDirect()</code>，避免了在用户空间和内核空间之间的数据复制。</li></ul></li><li><strong><code>FileRegion</code></strong>：<ul><li>Netty 提供了 <code>FileRegion</code>接口，可以将文件的数据区域直接传输到网络套接字，而不需要将数据复制到用户空间。</li><li><code>FileRegion</code> 使用了操作系统的 <code>sendfile</code>系统调用来实现零拷贝。</li></ul></li><li><strong><code>Splice</code></strong>：<ul><li>在 Linux 上，Netty 支持使用 <code>splice</code>系统调用来将数据从一个文件描述符传输到另一个文件描述符，而无需数据复制到用户空间。</li><li>这对于在文件系统和网络之间高效地传输数据非常有用。</li></ul></li><li><strong><code>ByteBuffer</code></strong>：<ul><li>Netty 使用 Java NIO 的 <code>ByteBuffer</code>来处理缓冲区。<code>ByteBuffer</code>可以是直接缓冲区（<code>ByteBuffer.allocateDirect()</code>）或堆缓冲区（<code>ByteBuffer.allocate()</code>）。</li><li>直接缓冲区的使用减少了从用户空间到内核空间的数据复制，提高了 I/O性能。</li></ul></li></ol><h3 id="总结">总结</h3><p>零拷贝技术通过减少数据在用户空间和内核空间之间的复制，显著提高了数据传输效率。在Netty 中，通过使用<code>ByteBuf</code>、<code>FileRegion</code>、<code>splice</code> 和<code>ByteBuffer</code>等技术，充分利用了零拷贝的优势，提供了高效的网络通信能力。这些技术使得Netty 在处理大规模网络数据传输时表现出色，能够有效地减少 CPU的负载并提高 I/O 性能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;线程和进程的区别&quot;&gt;1.线程和进程的区别&lt;/h3&gt;
&lt;p&gt;进程是分配资源的最小单元，进程包括多个线程，线程其实对应的就是cpu的核心&lt;/p&gt;
&lt;p&gt;线程是操作系统调度的最小单位，多个线程可以共享进程的资源&lt;/p&gt;
&lt;h3 id=&quot;tcp和udp的区别&quot;&gt;2.</summary>
      
    
    
    
    
    <category term="-JAVA" scheme="http://suojifeng.xyz/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>spring boot admin</title>
    <link href="http://suojifeng.xyz/2024/09/09/spring-boot-admin/"/>
    <id>http://suojifeng.xyz/2024/09/09/spring-boot-admin/</id>
    <published>2024-09-09T03:01:09.000Z</published>
    <updated>2024-09-09T03:14:10.363Z</updated>
    
    <content type="html"><![CDATA[<p>开源软件Spring Boot Admin</p><p>使用Actuator可以收集应用系统的健康状态、内存、线程、堆栈、配置等信息</p><h2 id="一什么是spring-boot-admin">一、什么是Spring Boot Admin</h2><p>Spring Boot Admin是一个管理和监控SpringBoot应用程序的开源项目，在对单一应用服务监控的同时也提供了集群监控方案，支持通过eureka、consul、zookeeper等注册中心的方式实现多服务监控与管理。SpringBoot Admin UI部分使用Vue JS将数据展示在前端。</p><p>Spring BootAdmin分为服务端（spring-boot-admin-server）和客户端（spring-boot-admin-client）两个组件：</p><ul><li>spring-boot-admin-server通过采集actuator端点数据显示在spring-boot-admin-ui上，已知的端点几乎都有进行采集。</li><li>spring-boot-admin-client是对Actuator的封装，提供应用系统的性能监控数据。此外，还可以通过spring-boot-admin动态切换日志级别、导出日志、导出heapdump、监控各项性能指标等。</li></ul><p>Spring BootAdmin服务器端负责收集各个客户的数据。各台客户端配置服务器地址，启动后注册到服务器。服务器不停地请求客户端的信息（通过Actuator接口）。具体架构如下图所示。</p><p>登录需要 从redis里面存取数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开源软件Spring Boot Admin&lt;/p&gt;
&lt;p&gt;使用Actuator可以收集应用系统的健康状态、内存、线程、堆栈、配置等信息&lt;/p&gt;
&lt;h2 id=&quot;一什么是spring-boot-admin&quot;&gt;一、什么是Spring Boot Admin&lt;/h2&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="-JAVA" scheme="http://suojifeng.xyz/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>sql优化</title>
    <link href="http://suojifeng.xyz/2024/08/22/sql-you-hua/"/>
    <id>http://suojifeng.xyz/2024/08/22/sql-you-hua/</id>
    <published>2024-08-22T09:12:50.000Z</published>
    <updated>2024-08-22T12:11:42.598Z</updated>
    
    <content type="html"><![CDATA[<p>1.加索引</p><p><strong>创建合适的索引</strong>：为查询频繁使用的字段创建索引，例如主键索引、唯一索引和组合索引，减少全表扫描的发生。</p><p><strong>覆盖索引</strong>：通过覆盖索引（即查询所需的所有列都包含在索引中）来避免回表操作，从而加快查询速度。</p><p>2.避免返回不必要的数据列，减少返回的数据列可以增加查询的效率</p><p>3.根据查询分析器适当优什5HL的结构，比如是否走全表扫描、避无子查询等</p><p>4.分库分表</p><p><strong>水平分区（Sharding）</strong>：将大表按某个维度（如日期、ID等）拆分为多个子表，以减少单表数据量，分散查询压力。</p><p><strong>垂直分区</strong>：将表按列进行拆分，特别是将经常一起查询的列放在一个表中，减少单次查询涉及的列数和数据量。</p><p>5.读写分离</p><p>6.语句优化</p><p>避免sql语句和分页查询优化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.加索引&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建合适的索引&lt;/strong&gt;：为查询频繁使用的字段创建索引，例如主键索引、唯一索引和组合索引，减少全表扫描的发生。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;覆盖索引&lt;/strong&gt;：通过覆盖索引（即查询所需的所有列都包含在索引中）来</summary>
      
    
    
    
    
    <category term="Java" scheme="http://suojifeng.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="http://suojifeng.xyz/2024/08/21/spring/"/>
    <id>http://suojifeng.xyz/2024/08/21/spring/</id>
    <published>2024-08-21T03:16:33.000Z</published>
    <updated>2024-08-22T07:40:34.920Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
    <category term="Java" scheme="http://suojifeng.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>锁面试</title>
    <link href="http://suojifeng.xyz/2024/08/21/suo-1/"/>
    <id>http://suojifeng.xyz/2024/08/21/suo-1/</id>
    <published>2024-08-21T02:29:02.000Z</published>
    <updated>2024-08-22T09:30:13.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cas">1.CAS</h2><p>CAS（Compare-And-Swap，比较与交换）是一种常见的无锁（lock-free）机制，用于实现多线程环境下的原子操作。CAS操作通过硬件支持的原子指令来实现，确保在多线程竞争的情况下，数据的一致性和操作的原子性。</p><p>CAS操作涉及三个参数：</p><ul><li><strong>V</strong>：需要更新的变量的内存地址。</li><li><strong>E</strong>：预期值，即当前线程认为变量的值应该是什么。</li><li><strong>N</strong>：新值，即希望将变量更新为的值。</li></ul><p>CAS的执行步骤如下：</p><ol type="1"><li><strong>读取变量V的当前值</strong>。</li><li>比较V的当前值与预期值E：<ul><li>如果相等，说明没有其他线程修改过V，则将变量的值更新为N，并返回<code>true</code>，表示更新成功。</li><li>如果不相等，说明在此期间V已经被其他线程修改，则更新失败，返回<code>false</code>。</li></ul></li></ol><p>这个过程是由硬件指令（如x86架构中的<code>CMPXCHG</code>指令）保证的原子操作，避免了竞态条件（RaceCondition）。</p><p>boolean isUpdated = atomicInteger.compareAndSet(expectedValue,newValue);</p><h3 id="cas的缺点"><strong>CAS的缺点</strong></h3><ul><li><strong>ABA问题</strong>：在CAS操作中，如果一个变量的值从A变为B，再变回A，CAS检查时可能认为值没有变化，从而导致误判。为了解决这个问题，Java引入了<code>AtomicStampedReference</code>，它在CAS操作中加入了版本号（或时间戳），从而检测值的变化。</li><li><strong>自旋问题</strong>：CAS操作失败时通常会不断重试（自旋），这可能导致CPU资源的浪费，尤其是在高竞争的场景下。</li><li><strong>只能保证一个变量的原子性</strong>：CAS只能保证一个共享变量的原子性，如果需要同时操作多个变量，必须使用其他机制如锁或通过组合使用<code>AtomicReference</code>来实现。</li></ul><h2 id="哪些类用到了cas">哪些类用到了CAS</h2><h3 id="atomic系列类">1. <strong><code>Atomic</code>系列类</strong></h3><p>这些类都是在<code>java.util.concurrent.atomic</code>包中，使用CAS实现了原子操作。</p><ul><li><strong><code>AtomicInteger</code></strong>:通过CAS实现了整数值的原子更新操作，如<code>incrementAndGet()</code>、<code>compareAndSet()</code>等。</li><li><strong><code>AtomicLong</code></strong>:与<code>AtomicInteger</code>类似，但操作的是<code>long</code>类型的值。</li><li><strong><code>AtomicBoolean</code></strong>:通过CAS操作<code>boolean</code>类型的值。</li></ul><h3 id="concurrent集合类">2.<strong><code>Concurrent</code>集合类</strong></h3><p>这些类在其实现中使用了CAS来保证多线程环境下的安全和性能。</p><ul><li><strong><code>ConcurrentHashMap&lt;K,V&gt;</code></strong>:通过CAS来实现节点的插入、更新和删除操作，确保在高并发下的线程安全性。</li><li><strong><code>ConcurrentLinkedQueue&lt;E&gt;</code></strong>:使用CAS来实现无锁的队列操作，提供高效的并发队列。</li><li><strong><code>ConcurrentLinkedDeque&lt;E&gt;</code></strong>:类似于<code>ConcurrentLinkedQueue</code>，但支持双端操作。</li><li><strong><code>ConcurrentSkipListMap&lt;K,V&gt;</code></strong> 和<strong><code>ConcurrentSkipListSet&lt;E&gt;</code></strong>:这些类通过CAS实现了跳表（Skip List）的无锁并发操作。</li></ul><h3 id="locks和synchronizers类">3.<strong><code>Locks</code>和<code>Synchronizers</code>类</strong></h3><p>这些类使用CAS来实现高效的线程控制机制。</p><ul><li><strong><code>ReentrantLock</code></strong>:使用CAS来控制锁的状态（如获取锁和释放锁）。</li><li><strong><code>StampedLock</code></strong>:结合了悲观和乐观锁的特性，使用CAS来处理不同模式下的锁定。</li><li><strong><code>CountDownLatch</code></strong>:使用CAS实现计数器的递减操作，保证线程之间的同步。</li><li><strong><code>Semaphore</code></strong>:在信号量计数的增减操作中使用CAS，确保多线程环境下的安全。</li><li><strong><code>Exchanger&lt;V&gt;</code></strong>:使用CAS来实现两个线程之间的数据交换操作。</li><li><strong><code>CyclicBarrier</code></strong>:使用CAS控制线程到达屏障的数量，确保线程安全。</li><li><strong><code>Phaser</code></strong>:使用CAS实现阶段的推进和参与线程的注册/注销。</li></ul><h3 id="threadpoolexecutor">4.<strong><code>ThreadPoolExecutor</code></strong></h3><ul><li>在<code>ThreadPoolExecutor</code>中，CAS用于控制线程池中的工作线程数量、任务的提交和执行状态</li></ul><h2 id="unsafe类">UNSAFE类</h2><p>提供了一组直接操作<strong>内存、线程、类加载等底层操作的方法</strong>。由于它能够绕过Java虚拟机（JVM）的大多数安全检查，因此称为“unsafe”（不安全）。<code>Unsafe</code>类主要用于JVM和核心库的内部实现，在Java应用程序中直接使用它是非常危险的。</p><p>虽然<code>Unsafe</code>类是内部使用的类，但它提供了底层的CAS操作API，许多并发类在其内部实现中都直接使用了<code>Unsafe</code>类的CAS方法，如<code>compareAndSwapInt</code>、<code>compareAndSwapLong</code>和<code>compareAndSwapObject</code>。</p><p><strong>底层操作能力</strong>：<code>Unsafe</code>类提供了访问和操作底层内存、对象以及线程的能力，包括直接操作内存、CAS（Compare-And-Swap）操作、对象字段偏移量获取、类实例化等。</p><h3 id="unsafe类的主要功能"><strong><code>Unsafe</code>类的主要功能</strong></h3><ul><li><strong>内存操作</strong>：<ul><li><code>allocateMemory(long bytes)</code>：分配一块指定大小的内存，类似于C语言中的<code>malloc</code>。</li><li><code>freeMemory(long address)</code>：释放通过<code>allocateMemory</code>分配的内存。</li><li><code>putLong(long address, long value)</code>和<code>getLong(long address)</code>：直接在指定内存地址上读写数据。</li></ul></li><li><strong>CAS操作</strong>：<ul><li><code>compareAndSwapInt(Object obj, long offset, int expect, int update)</code>：对指定对象的字段进行CAS操作。</li><li><code>compareAndSwapLong(Object obj, long offset, long expect, long update)</code>：对<code>long</code>类型字段进行CAS操作。</li><li><code>compareAndSwapObject(Object obj, long offset, Object expect, Object update)</code>：对引用类型字段进行CAS操作。</li></ul></li><li><strong>对象操作</strong>：<ul><li><code>getObject(Object obj, long offset)</code>和<code>putObject(Object obj, long offset, Object value)</code>：直接读取和写入对象的字段。</li><li><code>getInt(Object obj, long offset)</code>和<code>putInt(Object obj, long offset, int value)</code>：读取和写入整数字段。</li><li><code>objectFieldOffset(Field field)</code>：获取对象字段在内存中的偏移量，用于直接访问对象字段。</li></ul></li><li><strong>线程操作</strong>：<ul><li><code>park(boolean isAbsolute, long time)</code>：挂起当前线程，类似于<code>LockSupport.park</code>。</li><li><code>unpark(Thread thread)</code>：唤醒指定线程，类似于<code>LockSupport.unpark</code>。</li></ul></li><li><strong>类操作</strong>：<ul><li><code>defineClass(String name, byte[] b, int off, int len, ClassLoader loader, ProtectionDomain domain)</code>：在运行时动态定义类。</li><li><code>ensureClassInitialized(Class&lt;?&gt; c)</code>：确保指定类已初始化。</li></ul></li></ul><h3 id="unsafe类的使用场景">3.<strong><code>Unsafe</code>类的使用场景</strong></h3><p>尽管<code>Unsafe</code>类不推荐在应用程序中直接使用，但它在以下场景中非常有用：</p><ul><li><strong>JVM内部实现</strong>：许多JVM内部操作依赖<code>Unsafe</code>类实现，例如直接内存分配、对象实例化等。</li><li><strong>高性能并发库</strong>：<code>java.util.concurrent</code>包中的许多类（如<code>AtomicInteger</code>,<code>ConcurrentHashMap</code>）使用<code>Unsafe</code>类来实现无锁的并发操作，特别是CAS操作。</li><li><strong>性能优化</strong>：在极少数情况下，某些库或框架可能使用<code>Unsafe</code>类来进行性能优化，例如绕过对象创建时的初始化步骤。</li></ul><h2 id="java的锁有哪些">Java的锁有哪些</h2><h3 id="内置锁synchronized"><strong>内置锁（Synchronized）</strong></h3><p>Java内置的锁是最简单和最常用的锁机制，它是语言级的锁，使用<code>synchronized</code>关键字来实现。</p><p>在Java中，<code>synchronized</code>关键字用于同步代码块或方法，以确保在多线程环境中对共享资源的访问是线程安全的。根据<code>synchronized</code>关键字的使用位置，它的作用范围会有所不同，具体表现为加在方法上和加在类上的区别如下：</p><h3 id="synchronized加在实例方法上">1.<strong><code>synchronized</code>加在实例方法上</strong></h3><pre class="line-numbers language-none"><code class="language-none">javaCopy codepublic synchronized void instanceMethod() {    // 同步代码}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>作用范围</strong>：当<code>synchronized</code>加在实例方法上时，锁定的是当前实例对象（即<code>this</code>）。</li><li><strong>线程独占性</strong>：只有获取了当前实例对象锁的线程才能执行该方法。其他线程如果调用同一个实例的这个<code>synchronized</code>方法或其他<code>synchronized</code>实例方法，都需要等待锁的释放。</li><li><strong>适用场景</strong>：适用于同步控制与特定实例相关的操作，多个实例之间不会互相影响。</li></ul><h3 id="synchronized加在类方法静态方法上">2.<strong><code>synchronized</code>加在类方法（静态方法）上</strong></h3><pre class="line-numbers language-none"><code class="language-none">javaCopy codepublic static synchronized void staticMethod() {    // 同步代码}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>作用范围</strong>：当<code>synchronized</code>加在静态方法上时，锁定的是当前类的<code>Class</code>对象（即<code>ClassName.class</code>）。</li><li><strong>线程独占性</strong>：只有获取了当前类<code>Class</code>对象锁的线程才能执行该静态方法。其他线程如果调用同一个类的这个<code>synchronized</code>静态方法或其他<code>synchronized</code>静态方法，都需要等待锁的释放。</li><li><strong>适用场景</strong>：适用于同步控制与类本身相关的操作（如访问或修改静态变量），无论创建了多少实例，静态方法的锁都是类级别的，所有线程共享。</li></ul><h3 id="synchronized加在代码块上">3.<strong><code>synchronized</code>加在代码块上</strong></h3><p>除了方法级的锁定，<code>synchronized</code>还可以加在代码块上，以锁定特定对象或类：</p><ul><li><p><strong>锁定实例对象</strong>：</p><pre class="line-numbers language-none"><code class="language-none">javaCopy codepublic void method() {    synchronized(this) {        // 同步代码    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用同<code>synchronized</code>实例方法，锁定当前实例对象。</p></li><li><p><strong>锁定类对象</strong>：</p><pre class="line-numbers language-none"><code class="language-none">javaCopy codepublic void method() {    synchronized(ClassName.class) {        // 同步代码    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用同<code>synchronized</code>静态方法，锁定当前类对象。</p></li></ul><h3 id="区别总结"><strong>区别总结</strong></h3><ul><li><strong>同步范围</strong>：<code>synchronized</code>加在实例方法上时，锁定范围是实例对象级别，针对单个实例进行同步控制；加在类方法上时，锁定范围是类对象级别，针对整个类进行同步控制。</li><li><strong>影响范围</strong>：实例方法的<code>synchronized</code>只影响同一个实例的其他<code>synchronized</code>实例方法；而类方法的<code>synchronized</code>会影响该类的所有实例对象和该类的其他<code>synchronized</code>静态方法。</li><li><strong>使用场景</strong>：如果需要保护与实例相关的数据，应使用<code>synchronized</code>实例方法；如果需要保护与类相关的静态数据或资源，应使用<code>synchronized</code>静态方法。</li></ul><p>锁优化：</p><h3 id="jvm对synchronized的优化">JVM对<code>synchronized</code>的优化</h3><ol type="1"><li><strong>偏向锁（Biased Locking）</strong><ul><li><strong>原理</strong>：当一个线程首次获取锁时，JVM会偏向于该线程，并将锁标记为偏向锁。之后，如果同一线程再次请求这个锁，JVM不需要执行锁竞争操作，而是直接授予锁。偏向锁在无竞争场景下极大地减少了加锁的开销。</li><li><strong>适用场景</strong>：适用于锁竞争少、同一线程多次进入同步代码块的场景。</li></ul></li><li><strong>轻量级锁（Lightweight Locking）</strong><ul><li><strong>原理</strong>：在锁没有被其他线程竞争的情况下，JVM会将锁从偏向锁升级为轻量级锁。此时，线程通过CAS（Compare-And-Swap）操作来获取锁，而不是传统的阻塞方式。</li><li><strong>适用场景</strong>：适用于短时间内可能出现锁竞争，但竞争不激烈的场景。</li></ul></li><li><strong>自旋锁（Spin Locking）</strong><ul><li><strong>原理</strong>：自旋锁避免了线程在锁竞争失败后立即阻塞，而是让线程短时间内不断地尝试获取锁。这种方式适用于锁竞争时间短的场景，因为线程不会立即进入阻塞态，而是不断尝试获取锁，从而避免了上下文切换的开销。</li><li><strong>适用场景</strong>：适用于锁竞争频繁但每次竞争时间较短的场景。</li></ul></li><li><strong>锁消除（Lock Elimination）</strong><ul><li><strong>原理</strong>：在编译期间，JVM可以通过逃逸分析（EscapeAnalysis）检测到某些锁只在单线程环境中使用，或者锁对象没有逃逸到其他线程，那么JVM会自动消除这些锁。</li><li><strong>适用场景</strong>：适用于单线程场景或锁对象未共享的场景。</li></ul></li><li><strong>锁粗化（Lock Coarsening）</strong><ul><li><strong>原理</strong>：如果JVM检测到在一个方法或代码块中多次使用相同的锁，而这些加锁操作是紧密相连的，那么JVM会将这些锁操作合并为一个更大的锁块，从而减少加锁和解锁的频率。</li><li><strong>适用场景</strong>：适用于频繁的、短时间的锁操作。</li></ul></li><li><strong>适应性自旋（Adaptive Spinning）</strong><ul><li><strong>原理</strong>：在自旋锁的基础上，JVM会根据前一次自旋的结果动态调整自旋的次数。如果自旋能够快速获取锁，则增加自旋次数；反之，则减少自旋次数或直接阻塞线程。</li><li><strong>适用场景</strong>：适用于锁竞争时间波动较大的场景。</li></ul></li></ol><h3 id="开发者对synchronized的优化">开发者对<code>synchronized</code>的优化</h3><ol type="1"><li><strong>减少锁的持有时间</strong><ul><li><strong>做法</strong>：尽量将<code>synchronized</code>代码块的范围缩小到最小，确保只在确实需要同步的地方加锁，减少锁的持有时间。</li><li><strong>效果</strong>：减小锁的持有时间可以减少线程阻塞的时间，从而提高系统的并发性。</li></ul></li><li><strong>减少锁的粒度</strong><ul><li><strong>做法</strong>：将大锁拆分为小锁，针对不同的数据或资源使用不同的锁，以减少锁的竞争。</li><li><strong>效果</strong>：减小锁的粒度可以减少锁的争用，提高系统的并发能力。</li></ul></li><li><strong>使用更高效的并发工具</strong><ul><li><strong>做法</strong>：在某些场景下，可以用Java的其他并发工具类替代<code>synchronized</code>，如<code>ReentrantLock</code>、<code>ReadWriteLock</code>、<code>StampedLock</code>等。</li><li><strong>效果</strong>：这些工具类提供了更多的功能和优化，如可中断的锁获取、超时等待、读写分离等，能够在特定场景下提供更高的性能。</li></ul></li><li><strong>避免不必要的同步</strong><ul><li><strong>做法</strong>：通过仔细分析代码逻辑，避免在不需要同步的地方使用<code>synchronized</code>，例如仅在读操作时不需要同步。</li><li><strong>效果</strong>：减少不必要的同步可以显著提高性能，特别是在读多写少的场景中。</li></ul></li></ol><h3 id="显式锁">显式锁</h3><p><code>java.util.concurrent.locks</code>包提供了一些显式的锁类，如<code>ReentrantLock</code>，它们相比内置锁提供了更多的功能和灵活性。</p><ul><li><strong>ReentrantLock</strong>：一个可重入锁，提供了比<code>synchronized</code>更高级的功能，如公平锁、公平锁模式选择、尝试加锁（<code>tryLock</code>）、超时等待加锁等。</li><li><strong>ReentrantReadWriteLock</strong>：一个读写锁，实现了读写分离，读操作共享锁，写操作独占锁。它提高了读多写少场景下的并发性。</li></ul><h3 id="自旋锁">自旋锁</h3><p><code>CountDownLatch</code> 是 Java 中的一个同步辅助工具，属于<code>java.util.concurrent</code>包中的一部分。它用于让一个或多个线程等待直到其他线程完成一组操作。<code>CountDownLatch</code>主要用于在并发环境中协调多个线程的执行，尤其是当某些线程需要等待其他线程完成某些工作后才能继续执行时。</p><p><code>CountDownLatch</code>使用一个计数器来表示线程需要等待的操作次数。每当一个操作完成时，计数器减一。线程可以在计数器为零之前被阻塞，直到所有操作完成，计数器降到零。</p><h3 id="countdownlatch">CountDownLatch</h3><p><code>CountDownLatch</code>是一种同步辅助工具，允许一个或多个线程等待，直到其他线程完成一组操作。</p><h3 id="主要方法"><strong>主要方法</strong></h3><ol type="1"><li><p><strong><code>await()</code></strong>：使当前线程等待直到计数器的值变为零。线程会在这里被阻塞，直到其他线程调用<code>countDown()</code> 方法使计数器减到零。</p><pre class="line-numbers language-none"><code class="language-none">javaCopy codelatch.await();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>await(long timeout, TimeUnit unit)</code></strong>：使当前线程等待直到计数器的值变为零或等待时间超时。该方法允许设置一个超时时间，超时后线程将继续执行，即使计数器值未变为零。</p><pre class="line-numbers language-none"><code class="language-none">javaCopy codelatch.await(10, TimeUnit.SECONDS);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>countDown()</code></strong>：减少计数器的值。当一个操作完成时，调用<code>countDown()</code>方法将计数器的值减一。如果计数器的值减到零，所有在 <code>await()</code>方法中等待的线程将被唤醒。</p><pre class="line-numbers language-none"><code class="language-none">javaCopy codelatch.countDown();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>getCount()</code></strong>：返回当前计数器的值。</p><pre class="line-numbers language-none"><code class="language-none">javaCopy codelong count = latch.getCount();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-none"><code class="language-none">CountDownLatch latch = new CountDownLatch(3);new Thread(() -&gt; {    // 执行一些操作    latch.countDown();}).start();latch.await(); // 等待所有任务完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CountDownLatch</code>是一个强大的同步工具，用于协调多个线程的执行。当线程需要等待其他线程完成某些操作时，<code>CountDownLatch</code>提供了一个简单有效的机制来实现这种协调。通过控制计数器的值和调用<code>await()</code> 和 <code>countDown()</code>方法，开发者可以轻松地管理线程的依赖和同步。</p><h2 id="redlock">REDLOCK</h2><p>在分布式系统中，当多个节点需要访问共享资源时，需要确保对该资源的访问是互斥的，即同一时间只有一个节点可以访问该资源。分布式锁就是用来实现这一互斥控制的。传统的Redis 分布式锁（如基于 <code>SETNX</code>命令的实现）可能面临单点故障、锁丢失等问题，因此需要一种更为可靠的分布式锁机制。</p><h3 id="redlock-算法"><strong>Redlock 算法</strong></h3><p><strong>Redlock</strong> 的基本思想是使用多个 Redis实例来实现分布式锁，以提高锁的可靠性。其基本步骤如下：</p><ol type="1"><li><strong>部署多个 Redis 实例</strong>：<ul><li>部署 N 个独立的 Redis 实例（通常建议 N 为奇数，如 5 个实例）。</li></ul></li><li><strong>请求锁</strong>：<ul><li>客户端请求锁时，尝试在所有 Redis 实例上设置锁。</li><li>使用 <code>SET key value NX PX &lt;expire&gt;</code> 命令，在每个Redis 实例上设置一个带有超时的锁键。</li></ul></li><li><strong>判断锁的获取成功</strong>：<ul><li>锁获取成功的条件是：在至少 N/2 + 1 个 Redis实例上成功设置了锁。</li><li>如果成功设置的实例数量达到大于 N/2 的数量，则认为锁成功获取。</li></ul></li><li><strong>释放锁</strong>：<ul><li>客户端在使用完共享资源后，需要释放锁。</li><li>释放锁时，客户端需要在所有 Redis 实例上删除锁键。</li></ul></li><li><strong>处理锁的超时和过期</strong>：<ul><li>锁的超时时间（<code>PX</code>）应设置为足够长，以避免在正常情况下锁的超时释放，但也要避免锁在客户端崩溃时不被释放的问题。</li><li>客户端需要处理锁的自动续期和超时问题，以保证锁的有效性。</li></ul></li></ol><h3 id="优点"><strong>优点</strong></h3><ul><li><strong>容错性</strong>：通过多个 Redis实例分散风险，即使部分实例发生故障，只要大多数实例正常工作，锁仍然有效。</li><li><strong>高可用性</strong>：即使某个 Redis实例宕机，其他实例仍然可以继续提供锁服务。</li><li><strong>一致性</strong>：通过多数投票机制（N/2 +1）确保锁的一致性，减少了锁丢失的概率。</li></ul><h3 id="局限性"><strong>局限性</strong></h3><ul><li><strong>复杂性</strong>：与单一 Redis 实例相比，使用多个 Redis实例增加了系统的复杂性和运维成本。</li><li><strong>网络延迟</strong>：由于需要与多个 Redis实例进行交互，可能会增加网络延迟。</li><li><strong>锁的获取时间</strong>：在高负载情况下，获取锁可能需要较长时间，特别是当多个实例的网络延迟较大时。</li></ul><h3 id="使用示例"><strong>使用示例</strong></h3><p>使用 Redlock 时，通常需要使用 Redis 客户端库来实现，例如 <a href="https://github.com/redisson/redisson">Redisson</a> 提供了对Redlock 算法的支持。以下是使用 Redisson 实现 Redlock的一个示例代码片段：</p><pre class="line-numbers language-none"><code class="language-none">javaCopy codeimport org.redisson.Redisson;import org.redisson.api.RLock;import org.redisson.api.RedissonClient;import org.redisson.config.Config;public class RedlockExample {    public static void main(String[] args) {        // 配置 Redisson 客户端        Config config = new Config();        config.useClusterServers()              .addNodeAddress("redis://127.0.0.1:6379")              .addNodeAddress("redis://127.0.0.1:6380")              .addNodeAddress("redis://127.0.0.1:6381");                RedissonClient redisson = Redisson.create(config);        // 获取分布式锁        RLock lock = redisson.getLock("myLock");        try {            // 尝试获取锁            lock.lock();            // 执行受保护的操作            System.out.println("Lock acquired, performing protected operation.");        } finally {            // 释放锁            lock.unlock();        }                // 关闭 Redisson 客户端        redisson.shutdown();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><strong>总结</strong></h3><p><strong>Redlock</strong> 是一种通过多个 Redis实例来实现高可靠性的分布式锁算法，适用于需要高可用性和容错性的分布式系统。通过在多个Redis 实例上设置锁，并采用多数投票机制来保证锁的一致性，Redlock提供了一种在分布式环境中实现互斥控制的可靠方案。</p><h2 id="threadlocl">ThreadLocl</h2><p>ThreadLocal类是用来提供<strong>线程内部的局部变量,即线程本地变量</strong>。这种变量在多线程环境下访问(通过get和set方法访问)时能够保证<strong>各个线程的变量相对独立于其他线程内的变量</strong>，不同线程之间不会相互干扰，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或组件之间一些公共变量传递的复杂度。</p><p><strong>线程隔离机制</strong>，<strong>共享变量的监控</strong></p><p><strong>目的</strong>就是在多线程环境中，无需加锁，也能保证数据的安全性。</p><p><a href="https://www.zhihu.com/search?q=高并发&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A644909120%7D">高并发</a>中会存在多个线程同时修改一个<a href="https://www.zhihu.com/search?q=共享变量&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A644909120%7D">共享变量</a>的场景，这就可能会出现线性安全问题。</p><p>为了解决线性安全问题，可以通过加锁来实现，例如使用synchronized或者Lock。但是加锁的方式可能会导致系统变慢。</p><p>因此可以使用ThreadLocal类访问共享变量，这样会在每个线程的本地，都保存一份共享变量的拷贝副本。这是一种“空间换时间”的方案，虽然会让内存占用大很多，但是由于不需要同步也就减少了线程可能存在的阻塞等待，从而提高时间效率。</p><p>即 存储 key在ThreadLocalMap中然后使用 set getEntry remove操作</p><p>从上面的分析我们已经知道，数据其实都放在了 ThreadLocalMap中，ThreadLocal 的 get、set 和 remove 方法实际上都是通过 ThreadLocalMap的 getEntry、set 和 remove 方法实现的。如果想真正全方位的弄懂ThreadLocal，势必得再对 ThreadLocalMap 做一番理解。</p><p>数据库连接的隔离，比如说spring的jdbc的数据库</p><p>客户端的请求会话的一些隔离</p><p>可以用于hashmap中的线性探测寻址，解决hashmap中的冲突问题</p><p>弱引用key的避免内存泄漏</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cas&quot;&gt;1.CAS&lt;/h2&gt;
&lt;p&gt;CAS（Compare-And-Swap，比较与交换）是一种常见的无锁（lock-free）机制，用于实现多线程环境下的原子操作。CAS操作通过硬件支持的原子指令来实现，确保在多线程竞争的情况下，数据的一致性和操作的原子性。</summary>
      
    
    
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>redis面试</title>
    <link href="http://suojifeng.xyz/2024/08/20/redis-mian-shi/"/>
    <id>http://suojifeng.xyz/2024/08/20/redis-mian-shi/</id>
    <published>2024-08-20T03:19:38.000Z</published>
    <updated>2024-08-21T07:14:00.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis单机模式集群模式的区别说一下哨兵模式">Redis单机模式、集群模式的区别，说一下哨兵模式</h2><p>Redis是一个高性能的键值存储系统，支持多种部署模式，以满足不同的需求。以下是Redis 单机模式、集群模式的区别，以及哨兵模式的介绍：</p><h3 id="redis-单机模式">1. Redis 单机模式</h3><p><strong>特点</strong>：</p><ul><li><strong>单节点运行</strong>：所有数据都存储在一个 Redis实例中，读写操作也都在该实例上进行。</li><li><strong>简单易用</strong>：配置和管理较为简单，适用于小规模或对高可用性要求不高的场景。</li><li><strong>数据安全性</strong>：如果该节点出现故障，所有数据都可能丢失，除非配备了持久化机制（如RDB 或 AOF）。</li><li><strong>性能瓶颈</strong>：当数据量或访问请求增加时，单节点的性能和容量可能成为瓶颈。</li></ul><p><strong>适用场景</strong>：</p><ul><li>开发环境、测试环境、小规模的生产环境或对高可用性和数据持久化要求不高的应用。</li></ul><h3 id="redis-集群模式">2. Redis 集群模式</h3><p><strong>特点</strong>：</p><ul><li><strong>多节点分布</strong>：Redis集群由多个节点组成，数据分片存储在不同的节点上，每个节点只存储数据的一部分。</li><li><strong>高可用性</strong>：集群模式提供数据的冗余备份，某个节点失效时，其他节点可以继续提供服务。</li><li><strong>自动分片</strong>：数据通过一致性哈希算法自动分片，分布到集群的各个节点，集群可以动态扩展和缩减节点数量。</li><li><strong>支持大规模应用</strong>：可以处理较大的数据量和高并发请求，适用于需要高可用和高性能的大规模应用。</li></ul><p><strong>适用场景</strong>：</p><ul><li>大型互联网应用、分布式系统、需要高可用性和高吞吐量的数据存储场景。</li></ul><h3 id="redis-哨兵模式sentinel">3. Redis 哨兵模式（Sentinel）</h3><p><strong>介绍</strong>： Redis哨兵模式是用于实现高可用性的一种模式，它可以监控多个 Redis实例，并在主节点（Master）发生故障时，自动将某个从节点（Slave）提升为主节点，从而实现故障切换（failover）。</p><p><strong>哨兵模式的主要功能</strong>：</p><ol type="1"><li><strong>监控</strong>：哨兵会持续监控主节点和从节点的运行状态。如果发现主节点不可用，就会通知管理员并进行故障切换。</li><li><strong>自动故障切换</strong>：当主节点发生故障时，哨兵会选择一个从节点提升为新的主节点，并将其他从节点重新配置为复制新的主节点。</li><li><strong>通知</strong>：哨兵可以将事件（如故障切换）通知给客户端，客户端可以根据通知调整连接的主节点。</li><li><strong>配置提供者</strong>：哨兵还可以作为配置提供者，客户端可以通过哨兵获取当前的主节点信息，以便连接到正确的实例。</li></ol><p><strong>工作流程</strong>：</p><ul><li>哨兵以一定频率向 Redis 实例发送 <code>PING</code>命令来判断其状态。</li><li>如果一个哨兵发现某个节点不可达，它会认为该节点“主观下线”（SubjectivelyDown, SDOWN）。</li><li>如果足够多的哨兵（通过配置的<code>quorum</code>参数来控制）认为主节点不可用，则该主节点被标记为“客观下线”（ObjectivelyDown, ODOWN）。</li><li>一旦确定主节点ODOWN，哨兵将会进行故障切换，并推选一个从节点作为新的主节点，完成之后通知其他从节点和客户端。</li></ul><p><strong>适用场景</strong>：</p><ul><li>需要高可用性的生产环境，Redis主从结构下，使用哨兵模式可以自动监控和处理故障，确保系统的稳定性和连续性。</li></ul><h3 id="总结">总结</h3><ul><li><strong>单机模式</strong>：简单、适用于小规模应用，但存在单点故障问题。</li><li><strong>集群模式</strong>：适用于大规模、分布式系统，提供高可用性和可扩展性。</li><li><strong>哨兵模式</strong>：为主从复制提供高可用性支持，能自动处理主节点故障，实现自动故障切换。</li></ul><p>选择哪种模式取决于应用的规模、性能需求、可用性要求等。</p><h2 id="redis的连接池了解过吗">Redis的连接池了解过吗</h2><p>了解过，Redis 连接池是指在应用程序与 Redis数据库之间维护一个连接池，以便重用已有的连接，而不是在每次需要时都创建新的连接。使用连接池可以提高应用程序的性能，特别是在高并发场景下。</p><h3 id="连接池的工作原理">连接池的工作原理</h3><ul><li><strong>连接复用</strong>：连接池中预先创建了一定数量的连接，这些连接可以被多个客户端请求复用。当一个请求完成后，连接不会关闭，而是返回到连接池中等待下一个请求。</li><li><strong>最大连接数</strong>：连接池通常设有最大连接数限制，避免资源耗尽。当连接池中的所有连接都被占用时，新请求会被阻塞，直到有可用连接释放出来，或者抛出超时异常。</li><li><strong>最小连接数</strong>：连接池可以配置最小连接数，保持一定数量的连接始终处于可用状态，以减少请求的等待时间。</li></ul><p>我们项目里面使用的就是 <strong>Lettuce</strong>（Java）</p><p>Lettuce 默认提供异步、同步和响应式 API，同时也支持连接池。</p><pre class="line-numbers language-none"><code class="language-none">lettuce:      pool:        # 连接池最大连接数        # 配置连接池中最大的活跃连接数，也就是最多可以同时创建和使用多少个 Redis 连接。        max-active: 200        # 连接池最大阻塞等待时间（使用负值表示没有限制）        # 设置连接池最大阻塞等待时间，单位为毫秒。-1ms 表示没有限制，即一直等待，直到有连接可用。        max-wait: -1ms        # 这个参数控制着当连接池中空闲连接超过这个数量时，多余的空闲连接将会被释放，避免资源浪费。        # 连接池中的最大空闲连接        max-idle: 10        # 设置连接池中最小空闲连接数，即连接池中至少要保持多少个空闲连接，以确保在需要时有足够的连接可用。        # 连接池中的最小空闲连接        min-idle: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="spring-redis-template的用法">Spring Redis Template的用法</h2><p><code>Spring Redis Template</code> 是 Spring Data Redis提供的一个用于简化 Redis 操作的类，它封装了对 Redis数据库的各种常见操作。通过<code>RedisTemplate</code>，你可以轻松地进行字符串、哈希、列表、集合、有序集合等类型的操作。</p><p>使用 RedisTemplate 的一些注意事项</p><ol type="1"><li><strong>序列化器的配置</strong>：<code>RedisTemplate</code> 默认使用JdkSerializationRedisSerializer 来序列化键和值，如果存储非 Java序列化对象，可能导致数据无法被其他语言客户端识别。因此，通常会配置<code>StringRedisSerializer</code> 或<code>Jackson2JsonRedisSerializer</code> 等序列化器。</li><li><strong>线程安全</strong>：<code>RedisTemplate</code>是线程安全的，可以被多个线程共享使用。</li><li><strong>事务支持</strong>：<code>RedisTemplate</code> 支持 Redis的事务功能，可以通过 <code>redisTemplate.multi()</code> 和<code>redisTemplate.exec()</code> 来开启和提交事务。</li><li><strong>管道操作</strong>：对于批量操作，可以通过管道（pipeline）来提高性能</li></ol><p>在我门的项目中</p><p>这个配置的目的是通过 RedisTemplate 提供一种方便的方式与 Redis进行交互，并且通过自定义序列化器来确保 Redis中的数据以合适的格式存储和读取，特别是使用 JSON格式来存储对象数据，从而提高了数据的可读性和兼容性。</p><p><strong>缓存</strong>：常用于将一些频繁访问的数据缓存到 Redis中，减少对数据库的访问压力。</p><p><strong>分布式锁</strong>：通过 <code>setnx</code>操作实现分布式锁，确保在分布式环境中多个进程之间的互斥。</p><p><strong>计数器</strong>：通过 Redis的原子递增操作实现分布式计数器。</p><p><strong>消息队列</strong>：利用 Redis的列表结构实现简单的消息队列。</p><pre class="line-numbers language-none"><code class="language-none">public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory  connectionFactory)这是一个返回 RedisTemplate&lt;String, Object&gt; 类型的 Bean 方法。RedisTemplate 是 Spring 提供的一个用于执行 Redis 操作的模板类。参数：RedisConnectionFactory 是一个连接工厂接口，用于创建与 Redis 服务器的连接。用于将 Java 对象序列化为 JSON 字符串，或者将 JSON 字符串反序列化为 Java 对象。设置 Redis 值（value）的序列化方式为 jackson2JsonRedisSerializer。JSON 格式存储和读取redisTemplate.setConnectionFactory(connectionFactory);解释：为 RedisTemplate 设置连接工厂，用于创建与 Redis 服务器的连接。作用：绑定 RedisTemplate 和实际的 Redis 连接，使得 RedisTemplate 能够通过连接工厂与 Redis 服务器进行通信。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="redis连接泄露">Redis连接泄露</h2><p>Redis连接泄露指的是在使用Redis连接池的环境中，连接在使用后未能正确释放或归还到连接池，导致连接池中的连接数量逐渐减少，最终可能耗尽所有可用连接，导致应用程序无法再获得新的连接来与Redis服务器通信。</p><p>连接泄露的成因</p><ol type="1"><li><strong>未关闭连接</strong>：某些代码在使用完Redis连接后，没有调用<code>close()</code>方法归还连接到连接池，导致连接无法被其他请求重用。</li><li><strong>异常处理不当</strong>：在连接使用过程中，如果发生异常并且没有正确处理，可能会导致连接无法正确归还。例如，在一个try-catch块中获取了Redis连接，但在catch块中忘记释放连接。</li><li><strong>资源竞争</strong>：当多个线程或进程同时获取连接并尝试释放连接时，可能会出现竞争条件，导致连接无法正常归还。</li></ol><h2 id="redis-实现消息队列与-kafka-的区别">Redis 实现消息队列与 Kafka的区别</h2><p><strong>1. 数据结构</strong></p><ul><li><strong>Redis</strong>：Redis 的消息队列通常使用 <code>LIST</code>数据结构来实现，利用 <code>LPUSH</code> 和 <code>RPOP</code>操作来添加和消费消息。Redis 也可以利用 <code>PUB/SUB</code>实现发布/订阅模式，适合实时消息传递。</li><li><strong>Kafka</strong>：Kafka是一个分布式流处理平台，它使用分区和日志数据结构来实现消息队列。消息以日志形式存储在主题（topic）中，每个主题可以有多个分区，消息在分区中按照时间顺序追加。</li></ul><p><strong>2. 消息持久化</strong></p><ul><li><strong>Redis</strong>：Redis默认将消息存储在内存中，并可以通过持久化机制（RDB 快照、AOF日志）将数据持久化到磁盘。消息在 Redis中是易失的，主要用作缓存或实时处理。</li><li><strong>Kafka</strong>：Kafka主要关注消息的持久化，所有消息都存储在磁盘上，并且可以配置保留策略（例如按时间或空间限制）。消息即使在系统重启后也能保留，适合日志数据存储。</li></ul><p><strong>3. 消息处理</strong></p><ul><li><strong>Redis</strong>：Redis的队列模式支持简单的生产者-消费者模式，使用 <code>LIST</code>实现的队列支持 FIFO顺序，且支持阻塞操作（<code>BRPOP</code>）。<code>PUB/SUB</code>模式的消息会被所有订阅者接收，但没有消息持久化，订阅者在消息发布时需要在线。</li><li><strong>Kafka</strong>：Kafka支持分布式消费模式，消息被写入到多个分区中，消费者可以并行读取不同的分区。Kafka支持消费者组（ConsumerGroups），每个分区的消息只会被一个消费者组中的一个消费者处理，支持水平扩展和高吞吐量。</li></ul><p><strong>4. 性能和扩展性</strong></p><ul><li><p><strong>Redis</strong>：Redis 是单线程的，通过事件循环机制处理I/O操作，具有低延迟和高性能。适用于高频率的数据读取和写入操作，但在消息量很大的场景下，可能会受到内存限制和单线程处理能力的制约。</p></li><li><p><strong>Kafka</strong>：Kafka是分布式的，具有高吞吐量和高可扩展性。可以通过增加分区和消费者实例来扩展处理能力。适用于处理大规模的数据流和日志数据。</p><h2 id="redis是怎么解决key冲突的">redis是怎么解决key冲突的</h2><p>1.<strong>覆盖原则</strong></p><p>Redis 是一个键值存储系统，每个键在 Redis中都是唯一的。当你试图将一个新值存储到已经存在的键上时，Redis会直接覆盖原有的值。这个过程是原子的，也就是说，在同一个时间点，只能有一个值与该键相关联。</p><p>2.<strong>原子操作</strong></p><p>Redis提供了一些原子操作，确保在多客户端并发访问同一个键时不会产生冲突。比如，<code>INCR</code>、<code>DECR</code>、<code>SETNX</code>等命令都是原子的，意味着这些操作在执行时是不可分割的，确保多个客户端并发修改同一个键时不会出现竞争条件。</p><p>3.分布式锁**</p><p>在分布式系统中，Redis可以通过实现分布式锁来控制对关键资源的访问，避免键冲突。Redis 提供了<code>SET</code> 命令的扩展参数，如 <code>NX</code> 和<code>EX</code>，来实现分布式锁。</p><ol start="4" type="1"><li><strong>自动过期</strong></li></ol><p>Redis提供了键的自动过期机制。通过设置键的生存时间（TTL），可以确保某些键在过期后自动删除，从而避免了长期存在的冲突风险。</p></li></ul><h2 id="redis持久化">REDIS持久化</h2><p>RDB和AOF</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redis单机模式集群模式的区别说一下哨兵模式&quot;&gt;Redis单机模式、集群模式的区别，说一下哨兵模式&lt;/h2&gt;
&lt;p&gt;Redis
是一个高性能的键值存储系统，支持多种部署模式，以满足不同的需求。以下是
Redis 单机模式、集群模式的区别，以及哨兵模式的介绍</summary>
      
    
    
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>AQS</title>
    <link href="http://suojifeng.xyz/2024/08/17/aqs/"/>
    <id>http://suojifeng.xyz/2024/08/17/aqs/</id>
    <published>2024-08-17T09:06:53.000Z</published>
    <updated>2024-08-17T09:06:53.639Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>锁</title>
    <link href="http://suojifeng.xyz/2024/08/08/suo/"/>
    <id>http://suojifeng.xyz/2024/08/08/suo/</id>
    <published>2024-08-08T03:12:52.000Z</published>
    <updated>2024-08-08T03:13:30.952Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机科学中，"轻量级"和"重量级"通常用于描述软件结构、线程或同步机制的复杂性和资源消耗。它们的划分主要基于以下几个方面：</p><h3 id="资源消耗">1. 资源消耗</h3><ul><li><p>轻量级（Lightweight）</p><p>：</p><ul><li><strong>内存和CPU使用较少</strong>：轻量级组件或进程通常对系统资源的消耗较低，适用于资源有限的环境。</li><li><strong>简单的实现</strong>：通常设计简单，功能较为专注。</li><li><strong>快速启动和响应</strong>：由于资源开销小，轻量级进程或线程启动和执行速度较快。</li></ul></li><li><p>重量级（Heavyweight）</p><p>：</p><ul><li><strong>高资源消耗</strong>：重量级组件或进程通常需要较多的内存和CPU时间。</li><li><strong>复杂的实现</strong>：通常具有更复杂的功能和更广泛的能力。</li><li><strong>较慢的启动和响应</strong>：由于需要更多的资源，重量级进程或线程可能需要更多的时间来启动和运行。</li></ul></li></ul><h3 id="操作系统级别">2. 操作系统级别</h3><ul><li><p>轻量级线程</p><p>：</p><ul><li>又称为用户级线程，由用户空间的线程库管理，不需要操作系统内核的干预。</li><li>切换速度快，因为不需要系统调用。</li><li>常用于应用程序级并发控制。</li></ul></li><li><p>重量级线程</p><p>：</p><ul><li>又称为内核线程，由操作系统内核管理。</li><li>切换较慢，因为涉及系统调用和上下文切换。</li><li>提供更强的隔离性和稳定性，因为线程的调度由操作系统负责。</li></ul></li></ul><h3 id="锁机制">3. 锁机制</h3><ul><li><strong>轻量级锁</strong>：<ul><li><strong>无锁或自旋锁</strong>：如Java中的CAS操作，通常用于短时间的锁定。</li><li><strong>偏向锁和轻量级锁</strong>：Java中的锁优化技术，在低竞争下使用，避免操作系统内核锁。</li><li><strong>减少锁的开销</strong>：尽量减少使用锁的时间和范围。</li></ul></li><li><strong>重量级锁</strong>：<ul><li><strong>互斥锁（Mutex）</strong>：操作系统提供的同步机制，保证线程安全性。</li><li><strong>阻塞和唤醒</strong>：重量级锁在争用时会导致线程阻塞，需要操作系统的调度。</li><li><strong>线程间通信</strong>：通常用于需要高可靠性的场合。</li></ul></li></ul><h3 id="应用场景">应用场景</h3><ul><li><strong>轻量级方案</strong>：适用于需要快速响应且资源受限的场景，如移动应用中的简单任务调度。</li><li><strong>重量级方案</strong>：适用于需要强隔离和稳定性的场景，如多用户操作系统中的进程管理。</li></ul><h3 id="总结">总结</h3><p>轻量级和重量级的划分不是绝对的，而是相对的，需要根据具体场景和需求进行权衡和选择。在设计软件系统时，常常需要在轻量级和重量级之间取得平衡，以满足性能、资源和复杂度等方面的要求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在计算机科学中，&quot;轻量级&quot;和&quot;重量级&quot;通常用于描述软件结构、线程或同步机制的复杂性和资源消耗。它们的划分主要基于以下几个方面：&lt;/p&gt;
&lt;h3 id=&quot;资源消耗&quot;&gt;1. 资源消耗&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;轻量级（Lightweight）&lt;/p&gt;
&lt;p&gt;：&lt;</summary>
      
    
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/categories/JAVA/"/>
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>秋招提前批</title>
    <link href="http://suojifeng.xyz/2024/08/05/qiu-zhao-ti-qian-pi/"/>
    <id>http://suojifeng.xyz/2024/08/05/qiu-zhao-ti-qian-pi/</id>
    <published>2024-08-05T13:16:41.000Z</published>
    <updated>2024-08-05T13:17:57.893Z</updated>
    
    <content type="html"><![CDATA[<ol type="1"><li>三一重工</li><li>米哈游</li><li>拼多多</li><li>科大讯飞</li><li>4399游戏</li><li>oppo</li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;三一重工&lt;/li&gt;
&lt;li&gt;米哈游&lt;/li&gt;
&lt;li&gt;拼多多&lt;/li&gt;
&lt;li&gt;科大讯飞&lt;/li&gt;
&lt;li&gt;4399游戏&lt;/li&gt;
&lt;li&gt;oppo&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/categories/JAVA/"/>
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/tags/JAVA/"/>
    
    <category term="找工作" scheme="http://suojifeng.xyz/tags/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>民航项目</title>
    <link href="http://suojifeng.xyz/2024/07/31/min-hang-xiang-mu/"/>
    <id>http://suojifeng.xyz/2024/07/31/min-hang-xiang-mu/</id>
    <published>2024-07-31T11:01:34.000Z</published>
    <updated>2024-09-21T02:38:57.740Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="民航发动机数据管理系统">民航发动机数据管理系统</h1><p>首先这个数据管理系统主要是干什么的</p><ol type="1"><li><p><strong>数据管理</strong>：收集、存储和处理来自飞机发动机的传感器数据。这些数据可能包括发动机性能指标、飞行参数和环境条件。</p></li><li><p><strong>数据分析</strong>：利用机器学习和其他数据分析技术来分析这些数据，以识别模式、预测潜在故障或优化发动机性能。你提到过使用MATLAB 和 Weka 进行进行减推比例和排气裕度的计算与分析。。</p></li><li><p><strong>数据可视化</strong>：使用工具如 Element Plus 和 ECharts来展示分析结果，帮助用户理解数据和分析结果。</p></li><li><p><strong>权限管理</strong>：利用JWT令牌技术，通过自定义拦截器实现用户认证，并使用Sa-Token进行权限控制。</p></li><li><p><strong>集成与接口</strong>：项目涉及前后端的分离开发，并使用技术Apifox 来管理 API 接口文档和测试。</p></li><li><p><strong>系统功能</strong>：实现用户管理、权限管理、操作日志记录和文件存储等功能，通过EasyExcel 进行数据的导入导出。</p></li><li><p><strong>部署与优化</strong>：本地部署Jar包，使用Nginx作为反向代理服务器，增强系统的安全性和性能。</p><p><strong>业务价值</strong>：</p><ul><li>提高民航发动机监控数据的可视化水平，便于运营人员进行快速决策。</li><li>通过数据分析与机器学习，优化发动机性能，降低维护成本。</li></ul></li></ol><h2 id="acars数据航空器通信寻址与报告系统">ACARS数据（航空器通信寻址与报告系统）</h2><p>ACARS用于传输有关飞行操作的信息，如起飞和降落时间、飞行高度、速度等。</p><p>比如说：A00:起飞地面重量，起飞高度，起飞马赫数，发动机的转速，进口温度，离心机的转速</p><p>B00:排气气体温度,推力衰减,风扇转速,发动机风扇和核心的振动，航空器总重</p><h2 id="qar数据快速访问记录器">QAR数据（快速访问记录器）</h2><p>QAR系统记录详细的飞行数据，这些数据通常以高频率采集，提供非常精细的飞行记录。</p><p>马赫，高度，气压，温度，静态空气温度，排气温度， 燃油空气比，燃油流量</p><h2 id="b6105数据故障代码">B6105数据（故障代码）</h2><p>不同时刻发动机的不同传感器的，静态空气温度，气压、无线电高度，马赫数</p><h2 id="减推比例模型">减推比例模型</h2><p>减退比例：可以<strong>延长发动机的寿命</strong>，可以降低发动机在起飞和爬升阶段的推力输出，从而减少发动机部件的磨损和疲劳，延长发动机的使用寿命。在不需要最大推力的情况下使用减推比例，可以<strong>减少燃油消耗</strong>，提高燃油效率。这对于航空公司来说可以显著降低运营成本，尤其是在燃油价格波动较大的情况下。</p><h2 id="排气裕度模型">排气裕度模型</h2><p>是用于评估和优化喷气发动机性能的一种模型。它主要用于确定发动机在特定飞行条件下的排气性能，以及如何保持发动机在设计的性能范围内。排气裕度指的是发动机在特定操作条件下实际排气性能与设计目标性能之间的差距。它通常衡量发动机的实际排气温度、压力或速度与设计规定值之间的差异。</p><p>通过排气裕度模型，可以优化发动机的排气系统设计，以确保发动机在各种飞行条件下都能保持最佳性能。</p><h2 id="数据处理">数据处理</h2><p>ACARS数据不用处理，但是QAR数据需要处理</p><p>ACARS数据不涉及到时间，所以数据量少，但是QAR的数据量涉及到时刻，数据量大</p><p>QAR数据需要进行补全、去噪和归一化，查看减推比例</p><h2 id="数据库">数据库</h2><p>数据库里面的数据包括两种，一种是用来计算减推比例的，一种是用来计算排气裕度的</p><p>其中减推比例计算 在计算过程当中 最大值为26%</p><p>排气裕度 的数据量 最大是 大连飞往海南省和乌鲁木齐 大概5个小时</p><p>其中 一张表的数据量有多少呢 60×60×5×40 = 720000</p><p>我们有很多张表了 其实说 大概的也就 2 - 4小时的比较多</p><p>但是数据有很多 计算起来有很慢怎么解决呢 ：</p><p>1.数据压缩，降采样。去掉无关的数据列，然后是按照固定的时间间隔来抽取数据点而不是处理每一个时间点的数据。</p><p>2.将大数据集按某个维度（如时间或空间）切分为多个小的子集进行并行处理</p><p>可以说是一次旅程就可以有一张表出来：</p><p>那么就是 加入</p><p><strong>飞机信息表</strong>，记录飞机航班号，起飞时间、降落时间、飞机号、飞机信息、发动机类型</p><p><strong>发动机数据表</strong>，里面使用外键引用航班表的信息</p><h3 id="数据库优化">数据库优化</h3><p><strong>定义外键关系</strong>：通过在发动机数据表中使用外键来引用航班表中的主键，将每条发动机数据关联到具体的航班。</p><p><strong>确保唯一标识</strong>：确保每次航班（Flight）和每条发动机数据（EngineData）都有唯一的标识符，用来进行精确的关联。</p><p><strong>索引优化</strong>：在查询频繁的字段（如 <code>FlightID</code>和 <code>Timestamp</code>）上创建索引，以提高查询性能。</p><p><strong>外键约束</strong>：使用外键约束保持数据完整性，确保每条发动机数据都关联到有效的航班。</p><p>对于历史航班和其发动机数据，可以考虑定期进行归档，以减少主数据库的负担。</p><h2 id="数据库使用的设计模式">数据库使用的设计模式</h2><ol type="1"><li><strong>Cache Aside Pattern（旁路缓存模式）</strong></li></ol><ul><li><strong>目的</strong>：在数据访问时优先从缓存中读取数据，当缓存没有数据时，再从数据库中读取，并将结果写入缓存。</li><li><strong>应用场景</strong>：在需要频繁读取而数据变化不频繁的场景中，这种模式可以极大地提高数据访问效率。</li><li>优点：<ul><li>减少了数据库的压力。</li><li>提高了系统性能和响应速度。</li></ul></li><li><strong>示例</strong>：在电商系统中，经常读取但不经常更新的商品信息可以使用旁路缓存模式进行加速。</li></ul><p>2.<strong>Data Access Object Pattern（DAO 模式）</strong></p><ul><li><strong>目的</strong>：将数据访问操作封装到一个独立的对象中，提供数据的抽象接口。</li><li><strong>应用场景</strong>：在需要频繁进行数据库操作的场景下，使用DAO 模式可以将数据访问层与业务逻辑层分离。</li><li>优点：<ul><li>提供了一个统一的数据操作接口，隐藏了数据库访问的复杂性。</li><li>提高了代码的可维护性和可测试性。</li></ul></li><li><strong>示例</strong>：一个 <code>UserDAO</code>对象可以负责所有与用户相关的数据库操作，如查询、插入、更新和删除。</li></ul><ol start="3" type="1"><li><strong>Factory Pattern（工厂模式）</strong></li></ol><ul><li><strong>目的</strong>：为创建不同类型的数据对象提供统一的接口。</li><li><strong>应用场景</strong>：当需要根据不同条件动态创建不同类型的数据对象时，可以通过工厂模式生成这些对象。</li><li>优点：<ul><li>提供灵活的数据对象创建机制，方便维护。</li><li>隐藏具体数据类型的创建细节，符合开闭原则。</li></ul></li><li><strong>示例</strong>：在一个金融系统中，工厂模式可以用于生成不同类型的交易记录对象（如股票交易、债券交易）。</li></ul><h2 id="权限验证">权限验证</h2><p>基于RDBC权限管理的一个平台，分为用户，角色，权限</p><p>用户（多对多）角色（多对多）菜单,基于RBAC设计的，通过将权限分配给角色，角色分配给用户，一般是多对多的关系</p><p><strong>用户</strong>：平台上的个人账户，具有登录和使用系统的能力。</p><p>用户ID 用户名 密码（加密存储） 电子邮件 角色（一个或多个）</p><p>管理员：</p><p>​ 访问系统的所有功能</p><p>​ 管理用户账户（创建、编辑、删除）</p><p>​ 分配和修改角色</p><p>​ 发动机数据的上传和管理</p><p>操作员：</p><p>​ 和数据相关的一些工作</p><p>游客：</p><p>​ 使用相关功能</p><p>​ 导出数据，但不能上传</p><p>权限的话呢：增删改查肯定是要有的，包括数据和角色的表单管理</p><h2 id="负责人">负责人</h2><p>你作为负责人，你应该要做的是什么职责呢？</p><p>确定项目架构，搭建整体框架，基于 RBAC 权限模型设计用户数据库；</p><p>组员的工作：①前端页面的展示②机器学习算法集成③两个人做后端</p><h2 id="前端到后端数据的传输">前端到后端数据的传输</h2><p>首先是前端的交互，然后通过vue3的代码进行数据传输，使用http协议向后端发送数据（使用axios发起请求）</p><p>DTO 接收前端表单实体，Entity 与数据库交互，VO 用于前端展示</p><p>然后是数据传输：数据传输请求包括下面的主要部分</p><p><strong>请求方法</strong>：例如POST、PUT、GET等。</p><p><strong>请求URL</strong>：后端API的端点地址。</p><p><strong>请求头</strong>：包含Content-Type（如application/json）和其他元数据。</p><p><strong>请求体</strong>：包含实际发送的数据（通常是JSON格式）。</p><p>然后后端接受到请求数据之后呢，controller层进行处理，做一些工作</p><p>处理完请求后，后端会生成响应并发送回前端。响应通常包括状态码（如200OK）、响应头和响应体（如操作结果、成功消息、错误信息等）。</p><p>前端接收到后端的响应后，会根据响应的内容更新用户界面。例如，显示成功消息、更新视图、处理错误等。</p><h2 id="操作日志记录">操作日志记录</h2><p>登录日志：雪花算法id，用户名，服务，ip，日期，登录信息</p><p>操作日志包括：操作用户名，用户服务，用户ip，用户地理位置， 操作，操作具体内容，</p><p>自定义配置<strong>elasticsearch</strong>，实现长连接 AOP 调用 log服务实现 + SLF4J</p><p>怎么使用的呢？主要是使用<strong>Elasticsearch</strong>分布式搜索和分析引擎，来存储和分析日志数据</p><p><strong>Spring Data Elasticsearch</strong> 封装了基本功能，</p><p><strong><code>countLogin</code></strong>：</p><ul><li>该方法统计符合特定条件的登录日志。默认情况下，它会统计最近一个月的登录情况。</li><li>使用 <code>BoolQueryBuilder</code>创建查询，过滤出状态为成功且操作类型为登录的记录。</li><li>使用 <code>AggregationBuilders</code>创建一个聚合，以用户名进行分组并统计每组的数量。</li><li>查询通过 <code>restTemplate.search</code> 方法执行，结果在<code>terms</code> 的 <code>bucket</code> 中返回。</li></ul><h2 id="websocket">Websocket</h2><p>在这里面websocket起到了什么作用呢？</p><p>WebSocket是一种协议，它为<strong>客户端和服务器之间的实时、双向通信提供了一个持久化的连接</strong>。与传统的HTTP请求-响应模型不同，WebSocket允许在单个连接上进行双向、全双工的数据交换。这使得WebSocket非常适合需要实时数据更新的应用场景，如在线聊天、实时通知、金融市场数据推送等。</p><p><strong>连接建立</strong>：客户端通过发起一个WebSocket握手请求与服务器建立连接。握手请求是一个标准的HTTP请求，但带有<code>Upgrade</code> 头，指示服务器将连接升级到WebSocket协议。</p><p><strong>握手响应</strong>：服务器回应一个WebSocket握手响应，确认升级协议并建立连接。</p><p><strong>数据传输</strong>：一旦连接建立，客户端和服务器可以通过WebSocket连接进行双向数据传输，而无需重新建立连接。数据可以是文本、二进制等格式。</p><p><strong>连接关闭</strong>：当通信完成或出现错误时，任何一方可以主动关闭WebSocket连接。连接关闭的过程类似于普通的HTTP连接关闭。</p><p>优点在于下面几点：</p><p><strong>实时性</strong>：WebSocket提供了低延迟的实时数据传输。这使得应用程序能够即时更新数据，而不需要频繁地轮询服务器。</p><p><strong>双向通信</strong>：WebSocket允许服务器主动向客户端推送数据，而不需要客户端发起请求。这对于需要服务器推送实时更新的应用（如实时聊天、在线游戏等）非常有用。</p><p><strong>减少开销</strong>：与传统的HTTP请求-响应模型相比，WebSocket的握手过程只发生一次，之后的数据传输不需要重复的HTTP头。这减少了网络开销和带宽消耗。</p><p><strong>持久连接</strong>：WebSocket连接在建立后是持久的，直到被显式关闭。这意味着数据传输可以在多个消息中维持一个连接，而无需重新建立连接。</p><h2 id="satoken">Satoken</h2><p>Sa-Token 是一个轻量级的 Java 权限管理框架，提供了基于 Token的认证和权限控制。它可以与 Spring Boot 等框架无缝集成，支持 JWT（JSONWeb Tokens）用于身份验证和授权。</p><p><strong>1.主要是 Sa-Token 整合 jwt</strong></p><p>Sa-Token 可以与 JWT 集成，使用 JWT 作为认证Token，确保请求的合法性和用户身份的验证。</p><p><strong>2.注册 Sa-Token 拦截器，校验规则为 StpUtil.checkLogin()登录校验</strong>。</p><p>通过配置 Sa-Token拦截器来拦截和处理请求，实现统一的权限管理和认证检查。</p><p>用 <code>StpUtil.checkLogin()</code> 方法检查用户是否已登录</p><p><strong>3.SaCheckPermission</strong></p><p>通过 <code>SaCheckPermission</code>注解进行权限控制，确保用户有权限访问某些资源。</p><p><strong>4.集成在全局异常处理当中</strong></p><p>GlobalExceptionHandler处理在 Spring Boot应用中出现的各种异常，并返回统一格式的错误响应。</p><h2 id="aop">AOP</h2><pre class="line-numbers language-none"><code class="language-none">@AfterReturning(pointcut = "@annotation(controllerLog)", returning = "commonResult")public void doAfterReturning(JoinPoint joinPoint, Log controllerLog, Object commonResult) {    if (Objects.isNull(commonResult)) {        HttpServletResponse response = ServletUtil.getResponse();        // 没有统一返回类则必须有相关response信息        if (Objects.isNull(response)) {            log.warn("LogAspect#doAfterReturning切面方法无返回值且未能获得Http响应信息，无法记录日志");            return;        }        // response状态码信息转换为CommonResult格式        commonResult = new CommonResult&lt;&gt;(response.getStatus(), response.getContentType(), null);    }    // 若返回值不是CommonResult类型，则根据返回值类型自动转换为CommonResult    if (!(commonResult instanceof CommonResult)) {        switch (commonResult) {            case Integer num -&gt; commonResult = CommonResult.of(num, "执行成功", "执行失败");            case Boolean flag -&gt; commonResult = CommonResult.of(flag, "执行成功", "执行失败");            default -&gt; commonResult = new CommonResult&lt;&gt;(HttpStatus.SUCCESS, "执行成功", commonResult);        }    }    handleLog(joinPoint, controllerLog, null, (CommonResult&lt;?&gt;) commonResult);}/** * 请求出现异常后执行 * * @param joinPoint 切点 * @param e         异常 */@AfterThrowing(value = "@annotation(controllerLog)", throwing = "e")public void doAfterThrowing(JoinPoint joinPoint, Log controllerLog, Exception e) {    handleLog(joinPoint, controllerLog, e, null);}/** * 使用虚拟线程 */private final ExecutorService virtualThreadPerTaskExecutor = Executors.newThreadPerTaskExecutor(NamedThreadFactory.newVirtualThreadFactory("log"));/** * 日志处理 * 1.记录请求上下文信息 * 2.开启虚拟线程异步处理 * 3.判断日志类型，解析注解中的Spring EL表达式，获取日志内容 * 4.调用日志服务保存日志 * * @param joinPoint     切点 * @param controllerLog 注解 * @param e             异常 * @param commonResult  统一返回值 */protected void handleLog(JoinPoint joinPoint, Log controllerLog, Exception e, CommonResult&lt;?&gt; commonResult) {    // 无法异步获取request以及登录用户，先记录request相关信息    String ip = IpUtil.getIpAddress(ServletUtil.getRequest());    int userId = 0;    String requestMethod = ServletUtil.getRequest().getMethod();    // 操作日志时提前记录用户id    if (controllerLog.businessType() != BusinessType.LOGIN &amp;&amp;            controllerLog.businessType() != BusinessType.LOGOUT &amp;&amp;            controllerLog.businessType() != BusinessType.ACCESS) {        userId = userIdSearcher.getUserId();    }    int currentUserId = userId; // 满足lambda等效静态    // 异步处理后续操作    virtualThreadPerTaskExecutor.execute(() -&gt; {        try {            SysLog sysLog = new SysLog();            sysLog.setOperate(controllerLog.businessType().getKey());            sysLog.setIp(ip);            sysLog.setLocation(IpUtil.getRegionAndIsp(ip));            // 获取方法入参，key为参数名，value为参数值            LinkedHashMap&lt;String, Object&gt; params = ReflectUtil.resolveParams(joinPoint);            StandardEvaluationContext context = ReflectUtil.paramsAlias(params);            // 用自定义的Spring EL表达式解析字符串            sysLog.setService(ReflectUtil.resolveValue(controllerLog.service(), context, String.class));            // 是否抛出异常，若未抛出异常则通过状态码判断响应状态            if (Objects.nonNull(e)) {                sysLog.setStatus(BusinessStatus.FAIL.getKey());                sysLog.setContent(StringUtil.handleExpMsg(e.getMessage()));            } else if (commonResult.isSuccess()) {                // 请求处理成功                sysLog.setStatus(BusinessStatus.SUCCESS.getKey());                sysLog.setContent(ReflectUtil.resolveValue(controllerLog.content(), context, String.class));            } else {                // 请求处理失败                sysLog.setStatus(BusinessStatus.FAIL.getKey());                sysLog.setContent(commonResult.getMsg());            }            String username;            // 登录日志处理（含调用doAppLogin的登录）            if (BusinessType.LOGIN == controllerLog.businessType()) {                // 登录成功，直接从返回结果中获取用户信息                username = Objects.isNull(e) &amp;&amp; commonResult.isSuccess() ? ((UserVO) commonResult.getData()).getUsername()                        // 否则用自定义的Spring EL表达式解析参数获取异常的用户名                        : ReflectUtil.resolveValue(controllerLog.operator(), context, String.class);            }            // 注销日志处理，注销时会返回用户id            else if (BusinessType.LOGOUT == controllerLog.businessType()) {                Integer id = (Integer) commonResult.getData();                username = usernameSearcher.getUsername(id);            }            // 其他操作日志处理，可直接通过请求获得用户id            else {                // 访问日志可通过返回结果获取用户信息或者日志注解中的operator获取用户名                username = BusinessType.ACCESS == controllerLog.businessType() &amp;&amp; Objects.isNull(e) &amp;&amp; commonResult.isSuccess()                        ? ((UserVO) commonResult.getData()).getUsername()                        : StringUtil.isNotBlank(controllerLog.operator()) ? ReflectUtil.resolveValue(controllerLog.operator(), context, String.class)                        : usernameSearcher.getUsername(currentUserId);                // 获取请求方法类名                String className = joinPoint.getTarget().getClass().getName();                // 获取请求方法名                String methodName = joinPoint.getSignature().getName();                // 记录的方法格式为：类名#方法名格式                sysLog.setMethod(STR."\{className}#\{methodName}");                sysLog.setRequestMethod(requestMethod);            }            sysLog.setUsername(username);            logFeignService.saveLog(sysLog);        } catch (Exception exception) {            log.error("日志存储失败", exception);        }    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个AOP日志切面代码的主要功能是对标记了特定注解的方法进行日志记录，分别在方法正常返回和抛出异常的情况下执行不同的处理逻辑。以下是代码中关键部分的解释：</p><h3 id="afterreturning注解">1.<strong><code>@AfterReturning</code>注解</strong></h3><p><code>@AfterReturning</code>表示该方法将在目标方法成功返回之后执行。</p><ul><li><strong><code>pointcut = "@annotation(controllerLog)"</code></strong>：该切面会拦截所有被标注了自定义注解（比如<code>@Log</code>）的方法。</li><li><strong><code>returning = "commonResult"</code></strong>：表示捕获目标方法的返回值<code>commonResult</code>。</li><li>在方法返回后，<code>doAfterReturning</code>会检查返回值是否为空（<code>commonResult</code>），如果为空，则通过<code>HttpServletResponse</code>生成一个默认的返回对象。如果返回值不是<code>CommonResult</code>类型，则进行相应的转换为统一格式。</li><li>最终调用<code>handleLog</code>方法来处理日志记录。</li></ul><h3 id="afterthrowing注解">2.<strong><code>@AfterThrowing</code>注解</strong></h3><p><code>@AfterThrowing</code>表示该方法会在目标方法抛出异常时执行。</p><ul><li><strong><code>throwing = "e"</code></strong>：捕获目标方法抛出的异常<code>e</code>。</li><li>方法体中通过<code>handleLog</code>处理异常信息并记录日志。</li></ul><h3 id="日志异步处理">3. <strong>日志异步处理</strong></h3><p>日志的核心处理逻辑位于<code>handleLog</code>方法中。通过虚拟线程池（<code>ExecutorService</code>）异步处理日志，以提高性能，避免阻塞主线程。</p><h3 id="日志处理逻辑">4. <strong>日志处理逻辑</strong></h3><p>在<code>handleLog</code>方法中，日志记录的详细逻辑包括：</p><ul><li><strong>获取请求的上下文信息</strong>：包括客户端IP地址、请求方法、用户ID等。</li><li><strong>判断业务类型</strong>：通过<code>controllerLog.businessType()</code>，判断是否为登录、注销、访问等不同类型的业务操作，分别处理用户信息的获取逻辑。</li><li><strong>解析注解中的Spring EL表达式</strong>：用自定义的SpringEL表达式解析注解中定义的日志内容，这样可以动态获取方法的参数、返回值，形成灵活的日志内容。</li><li><strong>处理异常或成功情况</strong>：如果抛出了异常，日志将记录为失败；如果没有异常，则根据返回值的状态记录成功或失败。</li><li><strong>日志异步保存</strong>：通过调用日志服务（<code>logFeignService.saveLog(sysLog)</code>）异步保存日志信息。</li></ul><h3 id="方法的核心作用">5. <strong>方法的核心作用</strong></h3><ul><li><strong><code>doAfterReturning</code></strong>：在目标方法正常返回后进行日志记录，统一处理返回结果，并调用日志处理逻辑。</li><li><strong><code>doAfterThrowing</code></strong>：在目标方法抛出异常时捕获异常信息，记录日志。</li><li><strong><code>handleLog</code></strong>：负责处理所有日志信息的细节，包括请求上下文信息、方法参数、用户信息、执行结果等。通过虚拟线程池进行异步处理，提高日志处理的效率。</li></ul><h3 id="虚拟线程">6. <strong>虚拟线程</strong></h3><ul><li>使用<code>virtualThreadPerTaskExecutor</code>创建虚拟线程（JDK中的轻量级线程），通过异步执行日志的保存操作，避免日志处理对应用性能产生影响。</li></ul><h3 id="总结">总结</h3><p>该AOP切面通过<code>@AfterReturning</code>和<code>@AfterThrowing</code>注解分别处理方法正常执行和抛出异常的情况，结合虚拟线程实现异步日志记录，解析方法参数、返回值及异常信息，并将这些信息保存为操作日志。这种实现方式减少了手动日志代码的冗余，并提升了日志记录的灵活性和性能。</p><h2 id="redis">Redis</h2><p>Redis部署在docker里面，默认端口</p><p>整合的是 satoken和redis链接</p><p>redis整合的是 jackson序列化方式</p><p>存储的是 redis的信息：用户的角色信息与权限列表，jwt-token请求时间</p><p>每次权限验证的时候重写satoken的接口，每次<strong>查权限</strong>和登录信息的时候从redis缓存里面查</p><p>还有就是经常查询的数据库：比如说是航班表的信息，但是实时数据可能不会存储到里面</p><p>在application.yml里面部署</p><p>使用Redis实现Session共享可以解决分布式应用程序中的Session一致性问题，同时提供高可用性和扩展性。Redis是一个快速、可靠且功能强大的缓存和数据存储系统，非常适合用于这种场景。</p><p>首先是用户信息，和权限信息，key/value形式，使用哈希的形式</p><p>然后是 用户会话登录形成的会话令牌即token，可以使用string进行Jackson序列化存储</p><h3 id="存储的数据类型具体大小">存储的数据类型，具体大小</h3><h3 id="如何保证缓存与数据库一致性">如何保证缓存与数据库一致性</h3><p>先更新数据库，然后再删除缓存</p><p>将更新缓存和删除缓存</p><p><strong>异步重试</strong>。什么是异步重试？</p><p>其实就是把重试请求写到「消息队列」中，然后由专门的消费者来重试，直到成功。</p><p>或者更直接的做法，为了避免第二步执行失败，我们可以把操作缓存这一步，直接放到消息队列中，由消费者来操作缓存。</p><p>到这里你可能会问，写消息队列也有可能会失败啊？而且，引入消息队列，这又增加了更多的维护成本，这样做值得吗？</p><p>这个问题很好，但我们思考这样一个问题：如果在执行失败的线程中一直重试，还没等执行成功，此时如果项目「重启」了，那这次重试请求也就「丢失」了，那这条数据就一直不一致了。</p><p>所以，这里我们必须把重试或第二步操作放到另一个「服务」中，这个服务用「消息队列」最为合适。这是因为消息队列的特性，正好符合我们的需求：</p><ul><li><strong>消息队列保证可靠性</strong>：写到队列中的消息，成功消费之前不会丢失（重启项目也不担心）</li><li><strong>消息队列保证消息成功投递</strong>：下游从队列拉取消息，成功消费后才会删除消息，否则还会继续投递消息给消费者（符合我们重试的场景）</li><li><figure><img src="/2024/07/31/min-hang-xiang-mu/Users\suoshi\AppData\Roaming\Typora\typora-user-images\image-20240911222304193.png" alt="image-20240911222304193"><figcaption aria-hidden="true">image-20240911222304193</figcaption></figure></li></ul><p>1.简单：适应并发量一致性都不是很高</p><p>写的时候删除缓存，然后再更新DB</p><p>读的时候先读缓存，然后读DB，异步将数据刷会缓存</p><p>问题在于 中间有一个步骤出错了怎么办，读写，写写并发会出现不一致的问题</p><p>2.一般：</p><p>引入日志binlog，通过解析binlog来刷新缓存</p><p>写的时候第一步先删除缓存，删除之后再更新DB，我们监听从库(资源少的话主库也ok或者直接分析binlog也可以)的binlog，通过分析binlog我们解析出需要需要刷新的数据，然后读主库把最新的数据写入缓存。</p><p>读的时候读的时候先读缓存，然后读DB，异步将数据刷会缓存</p><p>3.困难</p><p>利用<strong>MQ</strong>集成分布式系统 将所有“读数据库” +“写数据库缓存”的步骤<strong>串行化</strong></p><figure><img src="/2024/07/31/min-hang-xiang-mu/Users\suoshi\AppData\Roaming\Typora\typora-user-images\image-20240821141457071.png" alt="image-20240821141457071"><figcaption aria-hidden="true">image-20240821141457071</figcaption></figure><p>写的时候第一步先删除缓存，删除之后再更新DB，我们监听从库(资源少的话主库也ok)的binlog，通过分析binlog我们解析出需要需要刷新的<strong>数据标识</strong>，然后将<strong>数据标识写入MQ</strong>，接下来就<strong>消费MQ</strong>，解析MQ消息来读库获取相应的数据刷新缓存。</p><p>读的时候第一步先读缓存，如果缓存没读到，则去读DB，之后再异步将数据标识写入MQ（这里MQ与写流程的MQ是同一个），接下来就消费MQ，解析MQ消息来读库获取相应的数据刷新缓存。</p><p>4.困难进阶</p><p>阿里开源的cannl组件</p><p>基于binlog可以将数据库同步到其他各类数据库中，目标数据库支持mysql,postgresql,oracle,redis,MQ,ES等</p><p>canal分成服务端deployer和客户端adapter，我们可以部署多个，同时为了方便管理还提供了一个管理端admin</p><figure><img src="https://i-blog.csdnimg.cn/blog_migrate/3fc70f3217cb46364b4f6a3c6d0f3bf6.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p>不同点就在于我们加一个缓存，将近期被修改的数据进行标记锁定。读的时候，标记锁定的数据强行走DB，没锁定的数据，先走缓存，加上标志cache_0来规定</p><h2 id="注册登录">注册登录</h2><p>使用邮箱注册，需要验证码，验证码存放在redis中，在redis中设置有效时间为一分钟</p><p>忘记密码：与注册部分同理，也是邮箱验证码</p><p>验证码：配置 SMTP 服务器地址+qq邮箱小号</p><p>用户登陆后后端会生成token与session存入redis中，同时token还会传送给前端，前端每次发送请求请求头中都会带着token。之后会与redis中存储的token进行对比验证，如果相同并且没有过期，就会放行。</p><h2 id="cookiesessiontoken">cookie、session、token</h2><p>cookie是客户端，浏览器。不安全根据cookie登录不同的账号，容量有限。不能完全依赖cookie</p><p>session 响应头里面加入 set-cookie。 主要是<strong>sessionID</strong>可以是map存出用户信息，存储在服务端，安全。但是扩展性差，跨域限制。</p><p>多个服务器 =&gt; 集群session设置。</p><p>使用JWT token 进行传递字符串。</p><p>base64加密。</p><h2 id="minio">MINIO</h2><p>服务地址，<strong>用户名，密码，存储桶</strong></p><p>分布式对象存储</p><p>包括分片续传和单点上传</p><h2 id="http协议">http协议</h2><p>HTTP 是超⽂本传输协议，信息是明⽂传输</p><p>HTTPS 则解决 HTTP 不安全的缺陷，在TCP 和 HTTP ⽹络层之间加⼊了SSL/TLS 安全协议</p><ol type="1"><li>HTTP1.1（用的最多）<ol type="1"><li>相比于1.0，新增了那些功能？<ul><li>提出了<strong>⻓连接</strong>的通信⽅式，也叫持久连接。只要任意⼀端没有明确提出断开连接，则保持TCP 连接状态。</li><li>⻓连接的⽅式这使得<strong>管道（pipeline）⽹络传输</strong>成为了可能。在同⼀个TCP连接⾥⾯，客户端可以发起多个请求，只要第⼀个请求发出去了，不必等其回来，就可以发第⼆个请求出去，可以<strong>减少整体的响应时间。</strong></li><li>增加了host字段。1.0认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。而虚拟主机技术的发展，一台物理服务器上有多个虚拟主机，共享一个IP，于是增加host字段区分。</li><li>没有请求优先级控制</li></ul></li></ol></li><li>HTTP2.0<ol type="1"><li>HTTP/2 协议是<strong>基于 HTTPS 的</strong>，所以 HTTP/2的安全性也是有保障的。</li><li>相比于1.1的性能改进：<ul><li>引入二进制分帧层。HTTP/2 不再像 HTTP/1.1⾥的纯⽂本形式的报⽂，⽽是全⾯采⽤了<strong>⼆进制格式</strong>，头信息和数据体都是⼆进制，并且统称为帧（frame）：<strong>头信息帧和数据帧</strong>。</li><li>HTTP/2 多个HTTP请求复⽤⼀个TCP连接，⼀旦发⽣丢包，就会阻塞住所有的HTTP 请求。</li></ul></li></ol></li></ol><h2 id="nginx">nginx</h2><p>电脑和前端页面访问的中介就是 nginx <strong>高性能web</strong></p><p>部署完打包之后 使用Nginx作为反向代理服务器，将请求转发给SpringBoot项目。</p><p>首先，安装Nginx，并编辑配置文件（一般位于/etc/nginx/nginx.conf），添加以下配置：</p><pre class="line-numbers language-none"><code class="language-none">http {    server {        listen 80;        server_name your_domain_name;        location / {            proxy_pass http://localhost:9090;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将your_domain_name替换为你的域名，your_project_port替换为项目运行的端口。</p><p>保存并退出配置文件后，重启Nginx服务：</p><p>考虑为你的 Nginx 服务器配置 SSL/TLS 证书以实现 HTTPS。可以使用 <a href="https://letsencrypt.org/">Let's Encrypt</a> 提供免费的 SSL证书。</p><p>如果有多个后端服务器，可以使用 Nginx 来实现简单的负载均衡。只需在<code>proxy_pass</code> 配置中定义多个上游服务器即可。</p><pre><code># HTTPS server##server {#    listen       443 ssl;#    server_name  localhost;#    ssl_certificate      cert.pem;#    ssl_certificate_key  cert.key;#    ssl_session_cache    shared:SSL:1m;#    ssl_session_timeout  5m;#    ssl_ciphers  HIGH:!aNULL:!MD5;#    ssl_prefer_server_ciphers  on;#    location / {#        root   html;#        index  index.html index.htm;#    }#}</code></pre><p>使用nginx解决跨域问题。也是在conf里面修改配置问题</p><p><strong><code>Access-Control-Allow-Origin</code></strong>：允许指定的源访问资源。<code>*</code>表示允许所有源访问，你也可以指定具体的域名（如<code>https://example.com</code>）。</p><p><strong><code>Access-Control-Allow-Methods</code></strong>：指定允许的HTTP 方法。</p><p><strong><code>Access-Control-Allow-Headers</code></strong>：指定允许的请求头。</p><p><strong><code>Access-Control-Max-Age</code></strong>：指定预检请求的缓存时间。</p><h2 id="模型计算">模型计算</h2><p>ACARS数据那到底是怎么计算呢，主要是 包括单值预测和多值预测</p><p>其实和机器学习里面的东西是一样的。</p><p>基本上是调用<strong>matlab的模型，包括SCN和BP神经网络，和weka里面的机器学习模型</strong></p><p>怎么调用matlab的模型呢，首先是要把模型给打包，然后放入到pom.xml文件中，在controller中就可以调用了</p><p>weka应该怎么使用呢，主要是应该首先下载weka，然后也是放到pom.xml文件，一般处理的是arff文件</p><h2 id="部署问题">部署问题</h2><p>主要还是部署问题，</p><p>maven的package功能</p><p>得到相关的jar包，在linux或者其他系统通过java命令运行项目jar包</p><pre class="line-numbers language-none"><code class="language-none">java -jar boot-0.0.1-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后前端是 下载 nginx作为前端代理</p><p>前端打包的</p><pre class="line-numbers language-none"><code class="language-none">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将打包完成的 <strong>dist</strong>文件夹放到 nginx的 html文件夹里面，然后修改nginx.conf文件</p><p>在命令行启动 start nginx</p><p>然后就可以进去，主要是在云服务器中 要下载 mysql和redis这两个要启动</p><h2 id="项目难点">项目难点</h2><p>回答时，<strong>可以采用 STAR 法则</strong>：</p><ul><li><strong>Situation（情境）</strong>：简要介绍项目的背景和目标。</li><li><strong>Task（任务）</strong>：明确自己在项目中的职责和任务。</li><li><strong>Action（行动）</strong>：详细描述为实现目标所采取的具体行动和技术手段。</li><li><strong>Result（结果）</strong>：重点阐述项目取得的成果和带来的价值。</li></ul><h3 id="数据库设计">1.数据库设计</h3><p><strong>Situation（情境）</strong></p><p>民航发动机在飞行过程中会产生大量的一秒一次（实时）的数据。这些数据用来计算减推比例和排气裕度，项目的目标是建立一个高效的数据存储和管理系统，以便对不同发动机和航班的数据进行存储、记录、分析和可视化。</p><p><strong>Task（任务）</strong></p><p>怎么样去建立数据库，可以灵活写入、快速查询的数据库架构。</p><p><strong>Action（行动）</strong></p><p>在mysql的数据库的设计中，包括</p><p><strong>1.飞机信息表</strong>，记录航班号，起飞时间、降落时间、飞机号、飞机信息、发动机类型</p><p><strong>2.发动机数据表</strong>，记录发动机每秒的数据，然后主键是ID,外键是航班号</p><p>在发动机数据表中使用<code>flight_id</code>作为外键，引用飞机信息表中的<code>flight_id</code>，以确保每条发动机数据都关联到特定的飞机。然后从特定的飞机信息表上可以得到飞机信息</p><p><strong>优化：</strong></p><p>1.在写入的时候批量写入，而不是每秒直接写入数据库，1000条左右</p><p>2.对经常需要查询的字段 比如说航班号啊，时间加入索引，优化时间</p><p>3.上面分数据库的设计</p><p>4.定义外键约束。（缺点就是维护起来比较困难）</p><p><strong>Result（结果）</strong></p><p>执行起来更加迅速，数据库结构更加清晰。</p><h3 id="数据库和redis缓存不一致的问题">2.数据库和redis缓存不一致的问题</h3><p><strong>Situation（情境）</strong></p><p>民航发动机在飞行过程中会产生大量的一秒一次（实时）的数据。<strong>数据更新mysql数据库的时候和缓存不一致的情况。</strong>或者是mysql和redis的分布式事务的问题</p><p><strong>Task（任务）</strong></p><p>怎么保证数据和缓存的一致性</p><p><strong>Action（行动）</strong></p><figure><img src="/2024/07/31/min-hang-xiang-mu/Users\suoshi\AppData\Roaming\Typora\typora-user-images\image-20240817183541276.png" alt="image-20240817183541276"><figcaption aria-hidden="true">image-20240817183541276</figcaption></figure><p><strong>Result（结果）</strong></p><p>保证了一致性</p><h3 id="多线程插入民航发动机的数据">3.多线程插入民航发动机的数据</h3><p>民航公司，会定时的 批量的 传输一部分的 发动机数据 上万条<strong>数据库化持久化操作</strong></p><p>提升速度 多线程：</p><p>事务失效：其他的怎么去快速感知，然后解决。</p><p>1.编程式事务：定义一个全局的事务管理器，让所有子线程都用这一个事务管理器。缺点：还是串行操作数据库</p><p>2.创建线程池：</p><p>每个线程处理 2000条数据</p><p>使用count down latch <img src="/2024/07/31/min-hang-xiang-mu/Users\suoshi\AppData\Roaming\Typora\typora-user-images\image-20240909141009461.png" alt="image-20240909141009461"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;民航发动机数据管理系统&quot;&gt;民航发动机数据管理系统&lt;/h1&gt;
&lt;p&gt;首先这个数据管理系统主要是干什么的&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据管理&lt;/strong&gt;：收集、存储和处理来自飞机发动机的传</summary>
      
    
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/categories/JAVA/"/>
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://suojifeng.xyz/2024/06/07/redis/"/>
    <id>http://suojifeng.xyz/2024/06/07/redis/</id>
    <published>2024-06-07T08:18:51.000Z</published>
    <updated>2024-08-07T08:44:05.830Z</updated>
    
    <content type="html"><![CDATA[<p>1.缓存</p><figure><img src="/2024/06/07/redis/缓存穿透.jpg" alt="缓存穿透"><figcaption aria-hidden="true">缓存穿透</figcaption></figure><figure><img src="/2024/06/07/redis/布隆过滤器.jpg" alt="布隆过滤器"><figcaption aria-hidden="true">布隆过滤器</figcaption></figure><p>（redission）布隆过滤器：通过对id计算hash值计算，通过id得到值在bitmap中置1，但是会误判（误判率5%以内）</p><p>攻击数据库</p><figure><img src="/2024/06/07/redis/缓存穿透面试解答.jpg" alt="缓存穿透面试解答"><figcaption aria-hidden="true">缓存穿透面试解答</figcaption></figure><p>缓存击穿</p><figure><img src="/2024/06/07/redis/缓存击穿.jpg" alt="缓存击穿"><figcaption aria-hidden="true">缓存击穿</figcaption></figure><figure><img src="/2024/06/07/redis/击穿解决办法.jpg" alt="击穿解决办法"><figcaption aria-hidden="true">击穿解决办法</figcaption></figure><figure><img src="/2024/06/07/redis/击穿面试解答.jpg" alt="击穿面试解答"><figcaption aria-hidden="true">击穿面试解答</figcaption></figure><figure><img src="/2024/06/07/redis/缓存雪崩.jpg" alt="缓存雪崩"><figcaption aria-hidden="true">缓存雪崩</figcaption></figure><figure><img src="/2024/06/07/redis/雪崩解决.jpg" alt="雪崩解决"><figcaption aria-hidden="true">雪崩解决</figcaption></figure><p>mysql与redis（双写一致性）业务背景 缓存和数据库写</p><figure><img src="/2024/06/07/redis/双写延迟双删.jpg" alt="双写延迟双删"><figcaption aria-hidden="true">双写延迟双删</figcaption></figure><p>采用分布式锁：</p><figure><img src="/2024/06/07/redis/分布锁.jpg" alt="分布锁"><figcaption aria-hidden="true">分布锁</figcaption></figure><figure><img src="/2024/06/07/redis/异步消息.jpg" alt="异步消息"><figcaption aria-hidden="true">异步消息</figcaption></figure><figure><img src="/2024/06/07/redis/双写一致表达.jpg" alt="双写一致表达"><figcaption aria-hidden="true">双写一致表达</figcaption></figure><p>redis的持久化：</p><p>RDB redis数据备份文件， 内存数据存入磁盘 bgsave（主动） save 900 1save 300 10 60 10000 （redis.conf被动）</p><p>AOF追加文件，命令日志 执行重写效果</p><p>删除策略：惰性删除 （不管他，过期了就删除）</p><p>定期删除：检查，删除过期，一些key</p><p>2.分布式锁</p><p>setnx命令</p><p>SET lock value NX EX 10</p><p>DEL key</p><p>redisson实现的分布式锁-执行流程（可重入）</p><figure><img src="/2024/06/07/redis/redisson分布锁.jpg" alt="redisson分布锁"><figcaption aria-hidden="true">redisson分布锁</figcaption></figure><p>加锁设置过期时间等操作都是基于lua脚本完成</p><figure><img src="/2024/06/07/redis/redis集群回答.jpg" alt="edis集群回答"><figcaption aria-hidden="true">edis集群回答</figcaption></figure><p>redis集群方案：</p><p>主从复制</p><p>哨兵模式</p><p>分片集群</p><figure><img src="/2024/06/07/redis/分片集群.jpg" alt="分片集群"><figcaption aria-hidden="true">分片集群</figcaption></figure><p>16384个哈希槽，</p><figure><img src="/2024/06/07/redis/分片解答.jpg" alt="分片解答"><figcaption aria-hidden="true">分片解答</figcaption></figure><figure><img src="/2024/06/07/redis/单线程快速回答.jpg" alt="单线程快速回答"><figcaption aria-hidden="true">单线程快速回答</figcaption></figure><p>3.消息队列、延迟队列</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.缓存&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/2024/06/07/redis/缓存穿透.jpg&quot; alt=&quot;缓存穿透&quot;&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;缓存穿透&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figu</summary>
      
    
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/categories/JAVA/"/>
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>TCP UDP HTTP</title>
    <link href="http://suojifeng.xyz/2024/06/06/tcp-udp-http/"/>
    <id>http://suojifeng.xyz/2024/06/06/tcp-udp-http/</id>
    <published>2024-06-06T07:33:15.000Z</published>
    <updated>2024-08-07T08:44:13.043Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2024/06/06/tcp-udp-http/Blog\source_posts\TCP-UDP-HTTP\Untitled.png" alt="Untitled">三次握手，四次挥手</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2024/06/06/tcp-udp-http/Blog&#92;source_posts&#92;TCP-UDP-HTTP&#92;Untitled.png&quot; alt=&quot;Untitled&quot;&gt;三次握手，四次挥手&lt;/p&gt;
</summary>
      
    
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/categories/JAVA/"/>
    
    
    <category term="JAVA" scheme="http://suojifeng.xyz/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>不忘初心</title>
    <link href="http://suojifeng.xyz/2024/05/22/bu-wang-chu-xin/"/>
    <id>http://suojifeng.xyz/2024/05/22/bu-wang-chu-xin/</id>
    <published>2024-05-22T00:32:14.000Z</published>
    <updated>2024-05-22T12:55:11.253Z</updated>
    
    <content type="html"><![CDATA[<p>正是关键时刻，回顾过往，今年正好是大有可为的时候所以要抓住机会</p><p>晚上还是会想起之前的那些故事，难免会把自己带入，不是说还有多难忘，而是就像是一个标志性的事件，大概快有6年了，距离高三结束，希望今年会有好的结果，之前的教训一定要吸取。</p><p>发现晚上还是会想起以前的事情，估计是我太无趣了吧，还没有点新鲜的事情。</p><p>已经很久了，已经是2024年的4月份了，我的小论文实验已经感觉到了最后的关头，但是才是刚刚开始，但是我觉得还是创新点有点不够，但是时间已经到了这里，我必须要去做出抉择和努力，我的身体最近也开始有点不舒服，我觉得我需要开始去锻炼了，这正好是一个好的时机。</p><p>加强自己的意志力，这才刚刚开始高强度的学习，可不能就此倒下，加油重回自己的青春，抓紧时间去搞定这些内容，放上我最近喜欢听的歌曲，希望你们可以喜欢：隐形的翅膀</p><p>十年人间！</p><p>就是在这个慌乱不知所措的时候才是要去让自己的心静下来，去考虑自己到底需要什么，需要什么东西‘好像确实你缺爱吗，你自卑吗，你想要证明自己吗，你爱面子吗，你到底是个什么人我觉得你自己更清楚自己一点，所以我想知道未来会怎么样，我会怎样</p><p>不正是自己所做的决定在决定着未来的走向。在这个无法捉摸到的时候才是最难熬最需要坚持的地方，我坚信这是你需要努力，需要去做的事情，好像还是会很想看你的近况，我的近况反思，我最近好像抱怨的东西越来越多了，不知道会不会有人注意到呢，看头像看朋友圈那属实是屌丝不能再屌丝了</p><p>无数次回望那个瞬间，我都很难过，又不得不向前，这就是人生吧。</p><p>希望你看到这个会开心，我是无所谓了，被人遗忘被人忽视好像也就是自己的宿命。</p><figure><img src="/2024/05/22/bu-wang-chu-xin/wallhaven.jpg" alt="爱与自由"><figcaption aria-hidden="true">爱与自由</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正是关键时刻，回顾过往，今年正好是大有可为的时候所以要抓住机会&lt;/p&gt;
&lt;p&gt;晚上还是会想起之前的那些故事，难免会把自己带入，不是说还有多难忘，而是就像是一个标志性的事件，大概快有6年了，距离高三结束，希望今年会有好的结果，之前的教训一定要吸取。&lt;/p&gt;
&lt;p&gt;发现晚上</summary>
      
    
    
    
    <category term="My Daily Life" scheme="http://suojifeng.xyz/categories/My-Daily-Life/"/>
    
    
    <category term="daily life" scheme="http://suojifeng.xyz/tags/daily-life/"/>
    
    <category term="CR" scheme="http://suojifeng.xyz/tags/CR/"/>
    
  </entry>
  
  <entry>
    <title>好久不见</title>
    <link href="http://suojifeng.xyz/2024/05/13/hao-jiu-bu-jian/"/>
    <id>http://suojifeng.xyz/2024/05/13/hao-jiu-bu-jian/</id>
    <published>2024-05-13T09:32:42.000Z</published>
    <updated>2024-05-20T09:10:59.270Z</updated>
    
    <content type="html"><![CDATA[<p>讲真好久不见</p><p>不知不觉已经5月份了，时间过得好快啊，日记倒是没有写多少，生活也好像没什么进步</p><p>论文难道就这样吗，但是确实好像不用什么创新的地方</p><p>时间匆匆如流水，好像已经5月15号了</p><p>本科生的进度也是需要加快了，两周时间吧</p><p>每天好像不知道我应该去做什么，看文献吧又感觉无知无趣。</p><p>真的是感觉静不下心来，我需要去好好的思考一下了，我应该怎么去完成我应该完成的任务，还是需要冷静，将自己放在一个好的位置。</p><p>加油，也是挺羡慕人家的一些</p><p>不忘初心，好像知道慎独才是需要去注意的，有什么坏的习惯但是一定要好好想想</p><p>我好像是好说话一点，喜欢为被人考虑，但是我总是忙忙碌碌获得坏的结果</p><p>我害怕结果是坏的，我无法迈出第一步，我无法让自己去做更高能量的事</p><p>马上就要6月份，是不是需要迈出那一步了</p><p>想或不想，做或不做都是一个需要考虑的问题，跟随自己的内心，做自己认为正确的事情</p><p>认真对人，认真做事。</p><p>思想不积极那就放手</p><p>不知道怎样才算放下。</p><p>那就让自己放空才知道自己最需要什么</p><p>才子词人，自是白衣卿相</p><figure><img src="/2024/05/13/hao-jiu-bu-jian/QQ图片20240427145429.gif" alt="QQ图片20240427145429"><figcaption aria-hidden="true">QQ图片20240427145429</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;讲真好久不见&lt;/p&gt;
&lt;p&gt;不知不觉已经5月份了，时间过得好快啊，日记倒是没有写多少，生活也好像没什么进步&lt;/p&gt;
&lt;p&gt;论文难道就这样吗，但是确实好像不用什么创新的地方&lt;/p&gt;
&lt;p&gt;时间匆匆如流水，好像已经5月15号了&lt;/p&gt;
&lt;p&gt;本科生的进度也是需要加快了，</summary>
      
    
    
    
    <category term="My Daily Life" scheme="http://suojifeng.xyz/categories/My-Daily-Life/"/>
    
    
    <category term="daily life" scheme="http://suojifeng.xyz/tags/daily-life/"/>
    
  </entry>
  
  <entry>
    <title>新的一年新的开始</title>
    <link href="http://suojifeng.xyz/2024/04/30/xin-de-yi-nian-xin-de-kai-shi/"/>
    <id>http://suojifeng.xyz/2024/04/30/xin-de-yi-nian-xin-de-kai-shi/</id>
    <published>2024-04-30T08:00:00.000Z</published>
    <updated>2024-05-13T09:34:15.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回首2023">回首2023</h1><p>​2024年到来，我终于想起这里还有我的博客，从我心血来潮建立到现在好像只有89月份在努力的每天记录，不得不说那两个月是我用心学习的两个月。</p><p>​本来的方向是做医疗知识图谱，但是现在又换了赛道，从之前的9月份一整个月都在做知识图谱，后来到了10月份和11月份，突然要转到遥感的方向，迷茫中。</p><p>​10月份探索遥感领域，首先是了解了一些基本的简单的概念，总体来说国庆放假之后就只剩下三周的时间了，从刚开始的找数据集，懵懵懂懂，到确定做时间序列相关的遥感又是一个大的进步，但是这之间又是迷迷糊糊，感觉像是没有找到合适的关键词</p><p>​ 在10月份末还是找到了有关于satellite image time series的方向，读了读很经典的文献就是CNN领域里的全卷积网络和timeCNN，还有经典的 TAE LTAE PAE像素编码的阶段。</p><p>​ 然后又看到了多模态和迁移学习的方向，这次是看到了transferlearning和知识蒸馏的部分，觉得找到了真正可以做的有实际意义的地方，这就是到了10月末11月初。</p><p>​或许是觉得多模态可以做，然后就看了不少的多模态的文章，这也是算是把这个遥感领域的多模态文章都看过了，主要是光谱和SAR雷达的融合</p><p>​11月初的那一周好像没怎么看论文，或者说看了但是没有看多少，看了一些经典的高光谱的文章，有一些转到视觉方面去了，还是及时止损，还是想要靠上去遥感，真是不该。</p><p>​然后的一周觉得视觉还有点希望，确实还有一点可以做的东西，在spectralFormer里面找到的关于光谱方面的灵感，就是多个波段绑定在一起输入。</p><p>​ 还是在多模态的大坑里面游泳，看了几篇文献在反复横跳。</p><p>​到了11月份的第三周，突然看向了时间序列预测，又是横跳的一周，感觉又是找到了多模态公开的代码和数据集又是感觉可以做的一周，看看经典的文献也就是PATIAS数据集</p><p>​ 终于死心对多模态做出了总结这样转到了时间序列11月份又过去了。</p><p>​到了12月份之后，我是直接想要用时间序列来解决遥感相关的问题，然后去期刊上面寻找timeseries的相关论文，看了几篇有了点思路但是没有复现，问题还是有点大，这第一周又过去了，看了文献就相当于扩展思路了，顺便在第二周找了找一些相关的数据集，下载了下载。</p><p>​ 准备使用transformer去看看有没有什么可以做的，就已经很不错了</p><p>​然后在第三周找了个可以复现的文章感觉还可以，然后就感觉过得很快干了些杂货就忙忙碌碌的到了最后一周。</p><p>​最后一周也是紧挨着元旦，也没有很大进展，唯一的进展就是我把之前的对比学习的多模态遥感的那篇论文给复现了出来，也算是给自己一个交代在2023年的末尾。</p><h1 id="展望2024">展望2024</h1><p>​ 接下来的一年准备在多元时间序列的分类上面做一些工作和学习，因为遥感也可以说是土地分类就是一个特殊的MTSC任务，所以是可以迁移的。认准了就开始干吧。</p><h1 id="五一前夕">五一前夕</h1><p>马上就要5月份了，但是好像还是没有进入状态，今年确实应该是十分重要的一年，需要去做出准备，好像有半个月都没有刷题了吧，不知道是不是忘了，但是呢</p><p>既然现在知道了，就应该去采取行动</p><p>我不知道我们作为一个硕士需要多大的创新才可以，但是我觉得这已经算是很可以的了，加油吧，主要是把剩下的实验和图都画完，我知道这是一个艰苦的工作，但是必须要完成，应该是在五一的期间完成的，这其实可以说是一个自我超越的时候，去完成应该完成的工作</p><p>生活不知如何让我刁难，我的运气好像也是不好，不知是否是露怯还是怎么样，我爱面子嘛，感觉不是我只是觉得生活不应让我太难过，希望生活对我好一点把。</p><p>放上一个我喜欢的诗词：</p><p>人生若只如初见</p><p>何事秋风悲画扇</p><p>等闲变却故人心</p><p>却道故人心易变</p><figure><img src="/2024/04/30/xin-de-yi-nian-xin-de-kai-shi/花花.jpg" alt="花花"><figcaption aria-hidden="true">花花</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回首2023&quot;&gt;回首2023&lt;/h1&gt;
&lt;p&gt;​
2024年到来，我终于想起这里还有我的博客，从我心血来潮建立到现在好像只有8
9月份在努力的每天记录，不得不说那两个月是我用心学习的两个月。&lt;/p&gt;
&lt;p&gt;​
本来的方向是做医疗知识图谱，但是现在又换了赛</summary>
      
    
    
    
    <category term="My Daily Life" scheme="http://suojifeng.xyz/categories/My-Daily-Life/"/>
    
    
    <category term="daily life" scheme="http://suojifeng.xyz/tags/daily-life/"/>
    
  </entry>
  
  <entry>
    <title>时序思考</title>
    <link href="http://suojifeng.xyz/2024/01/24/2024-shuo-shi/"/>
    <id>http://suojifeng.xyz/2024/01/24/2024-shuo-shi/</id>
    <published>2024-01-24T13:35:34.000Z</published>
    <updated>2024-02-28T13:13:07.426Z</updated>
    
    <content type="html"><![CDATA[<p>新的开始，目前发现一个好的方向那就是patch，我想在这方面下功夫做出我自己的代码</p><p>但是最近的工作感觉是有在这个方面，但是基本上都在长时序预测上面，在分类上面我觉得应该应该是有区别的</p><p>所以 我觉得通道独立这个是不太对的，我觉得需要是需要考虑channel上面的注意力。我觉得应该要这么做，在明天把这几篇有关于patch的文章看完之后，我就去想自己的创新点，首先要是在自己的数据集上调通，然后就在想其他方法的问题。</p><p>明天会更新一下一些相关的论文，有关于patch的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新的开始，目前发现一个好的方向那就是patch，我想在这方面下功夫做出我自己的代码&lt;/p&gt;
&lt;p&gt;但是最近的工作感觉是有在这个方面，但是基本上都在长时序预测上面，在分类上面我觉得应该应该是有区别的&lt;/p&gt;
&lt;p&gt;所以 我觉得通道独立这个是
不太对的，我觉得需要是需要考</summary>
      
    
    
    
    <category term="My Daily Life" scheme="http://suojifeng.xyz/categories/My-Daily-Life/"/>
    
    
    <category term="daliy life" scheme="http://suojifeng.xyz/tags/daliy-life/"/>
    
  </entry>
  
  <entry>
    <title>time series</title>
    <link href="http://suojifeng.xyz/2024/01/02/time-series/"/>
    <id>http://suojifeng.xyz/2024/01/02/time-series/</id>
    <published>2024-01-02T12:59:04.000Z</published>
    <updated>2024-01-02T13:05:26.468Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有写博客了，最近开一个新坑时间序列，之前的研究方向不做知识图谱了，现在做一些多元时间序列的任务，也应该和遥感土地分类这块的MTSC有相关的东西。接下来应该跟一些。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没有写博客了，最近开一个新坑时间序列，之前的研究方向不做知识图谱了，现在做一些多元时间序列的任务，也应该和遥感土地分类这块的MTSC有相关的东西。接下来应该跟一些。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="time series" scheme="http://suojifeng.xyz/categories/time-series/"/>
    
    
    <category term="time series" scheme="http://suojifeng.xyz/tags/time-series/"/>
    
  </entry>
  
  <entry>
    <title>图签名函数</title>
    <link href="http://suojifeng.xyz/2023/09/25/tu-qian-ming-han-shu/"/>
    <id>http://suojifeng.xyz/2023/09/25/tu-qian-ming-han-shu/</id>
    <published>2023-09-25T13:01:58.000Z</published>
    <updated>2023-09-25T13:04:38.852Z</updated>
    
    <content type="html"><![CDATA[<p>图形签名函数（Graph SignatureFunction）是一种数学函数，它用于将图形（graphs）中的结构信息转化为数值或向量表示，以便进行图形分析、比较和处理。图形可以是网络、社交关系图、分子结构图、地理信息图等各种复杂结构的抽象表示。图形签名函数的目标是将这些复杂的图形结构映射为数学对象，以便进行进一步的计算和分析。</p><p>图形签名函数的设计通常涉及以下几个方面的考虑：</p><ol type="1"><li><p><strong>结构信息的编码：</strong>图形签名函数需要能够捕捉图形的结构信息，例如节点之间的连接、节点的属性，以及图形的拓扑特征。这些信息可以通过不同的方式编码，例如邻接矩阵、节点嵌入、子图频谱等。</p></li><li><p><strong>降维和特征提取：</strong>在编码结构信息后，图形签名函数通常会将高维的信息映射到低维的表示形式，以便后续的处理。这通常涉及到特征提取和降维技术，如主成分分析（PCA）或图形卷积神经网络（GraphConvolutional Networks，GCNs）。</p></li><li><p><strong>应用领域：</strong>图形签名函数的设计也受到应用领域的影响。不同的应用可能需要不同类型的图形签名，以满足特定的需求。例如，在药物发现中，图形签名可以用于表示分子结构，而在社交网络分析中，它可以用于表示社交关系图。</p></li><li><p><strong>性能评估：</strong>图形签名函数的性能通常会在特定任务或应用中进行评估，例如在图形分类、聚类、相似性度量或预测任务中。性能评估可以根据任务的准确性、效率和鲁棒性等指标来进行。</p></li></ol><p>总的来说，图形签名函数是一种关键的工具，用于将复杂的图形结构转化为数学表示，以便进行各种图形分析和处理任务。这些函数在许多领域，如计算机科学、生物信息学、社交网络分析等中都具有广泛的应用。</p><p>to compute <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.798ex;" xmlns="http://www.w3.org/2000/svg" width="50.968ex" height="4.947ex" role="img" focusable="false" viewbox="0 -950 22527.7 2186.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="TeXAtom" transform="translate(502,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="47" d="M216 68Q155 68 115 100T59 177T44 273Q44 299 50 333T73 421T133 533T239 632Q346 704 466 704Q508 704 515 703Q555 696 577 681T599 635Q599 605 570 560T523 496Q490 466 455 466Q440 466 440 475T469 526T499 589Q499 605 489 617Q460 636 403 636Q343 636 295 611T220 548T174 464T150 382T144 318Q144 241 180 189T287 137Q325 137 359 160Q428 205 466 322Q472 342 501 359T551 376Q557 376 560 373T564 368L565 365Q560 341 551 302T512 173T451 31Q359 -119 204 -119Q163 -118 127 -109T74 -91T53 -77Q52 -75 52 -71Q52 -54 79 -35T132 -14H140L151 -19Q210 -49 281 -49H289Q312 -49 329 -31Q351 -7 372 36T405 109T416 142L408 136Q401 131 392 125T369 111T338 96T303 82T261 72T216 68Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(1250.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2306.3,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"/></g><g data-mml-node="mo" transform="translate(2957.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3346.3,0)"><g data-mml-node="mi"><path data-c="47" d="M216 68Q155 68 115 100T59 177T44 273Q44 299 50 333T73 421T133 533T239 632Q346 704 466 704Q508 704 515 703Q555 696 577 681T599 635Q599 605 570 560T523 496Q490 466 455 466Q440 466 440 475T469 526T499 589Q499 605 489 617Q460 636 403 636Q343 636 295 611T220 548T174 464T150 382T144 318Q144 241 180 189T287 137Q325 137 359 160Q428 205 466 322Q472 342 501 359T551 376Q557 376 560 373T564 368L565 365Q560 341 551 302T512 173T451 31Q359 -119 204 -119Q163 -118 127 -109T74 -91T53 -77Q52 -75 52 -71Q52 -54 79 -35T132 -14H140L151 -19Q210 -49 281 -49H289Q312 -49 329 -31Q351 -7 372 36T405 109T416 142L408 136Q401 131 392 125T369 111T338 96T303 82T261 72T216 68Z"/></g></g><g data-mml-node="mo" transform="translate(3941.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(4608.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5663.8,0)"><g data-mml-node="mi"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="4C" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z" transform="translate(1542,0)"/></g></g><g data-mml-node="mo" transform="translate(7886.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="munder" transform="translate(8275.8,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/></g><g data-mml-node="TeXAtom" transform="translate(82.1,-1100) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="56" d="M25 633Q25 647 47 665T100 683Q291 683 291 306Q291 264 288 213T282 132L279 102Q281 102 308 126T378 191T464 279T545 381T596 479Q600 490 600 502Q600 527 581 550T523 577Q505 577 505 601Q505 622 516 647T542 681Q546 683 558 683Q605 679 631 645T658 559Q658 423 487 215Q409 126 308 37T190 -52Q177 -52 177 -28Q177 -26 183 15T196 127T203 270Q203 356 192 421T165 523T126 583T83 613T41 620Q25 620 25 633Z"/></g></g></g></g><g data-mml-node="msub" transform="translate(9886.5,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g><g data-mml-node="mo" transform="translate(10777.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mstyle" transform="translate(11166.5,0)"><g data-mml-node="mspace"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(12166.5,0)"><g data-mml-node="mi"><path data-c="77" d="M90 368Q84 378 76 380T40 385H18V431H24L43 430Q62 430 84 429T116 428Q206 428 221 431H229V385H215Q177 383 177 368Q177 367 221 239L265 113L339 328L333 345Q323 374 316 379Q308 384 278 385H258V431H264Q270 428 348 428Q439 428 454 431H461V385H452Q404 385 404 369Q404 366 418 324T449 234T481 143L496 100L537 219Q579 341 579 347Q579 363 564 373T530 385H522V431H529Q541 428 624 428Q692 428 698 431H703V385H697Q696 385 691 385T682 384Q635 377 619 334L559 161Q546 124 528 71Q508 12 503 1T487 -11H479Q460 -11 456 -4Q455 -3 407 133L361 267Q359 263 266 -4Q261 -11 243 -11H238Q225 -11 220 -3L90 368Z"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(722,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1000,0)"/><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1389,0)"/></g></g><g data-mml-node="mstyle" transform="translate(14111.5,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mi" transform="translate(15111.5,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"/></g><g data-mml-node="mo" transform="translate(16112.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(17168,0)"><g data-mml-node="mi"><path data-c="47" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q401 658 376 654T316 633T254 592T205 519T177 411Q173 369 173 335Q173 259 192 201T238 111T302 58T370 31T431 24Q478 24 513 45T559 100Q562 110 562 160V212Q561 213 557 216T551 220T542 223T526 225T502 226T463 227H437V273H449L609 270Q715 270 727 273H735V227H721Q674 227 668 215Q666 211 666 108V6Q660 0 657 0Q653 0 639 10Q617 25 600 42L587 54Q571 27 524 3T406 -22Q317 -22 238 22T108 151T56 342Z"/><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z" transform="translate(785,0)"/><path data-c="4E" d="M42 46Q74 48 94 56T118 69T128 86V634H124Q114 637 52 637H25V683H232L235 680Q237 679 322 554T493 303L578 178V598Q572 608 568 613T544 627T492 637H475V683H483Q498 680 600 680Q706 680 715 683H724V637H707Q634 633 622 598L621 302V6L614 0H600Q585 0 582 3T481 150T282 443T171 605V345L172 86Q183 50 257 46H274V0H265Q250 3 150 3Q48 3 33 0H25V46H42Z" transform="translate(1507,0)"/></g></g><g data-mml-node="mo" transform="translate(19425,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(19814,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(20564,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(21008.7,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mo" transform="translate(21860.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(22249.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span> 我们可以看到上面的就是 传入到了一个MLP当中，Z是GCN</p><p>我们对 GCN 的输出的节点嵌入 zv 求和。与全局参数 θ 一样，图签名模型 ψ通过二阶梯度下降进行优化。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import torchimport torch.nn as nn# 定义一个简单的神经网络模型作为图签名函数class GraphSignatureModel(nn.Module):    def __init__(self, input_size, hidden_size, output_size):        super(GraphSignatureModel, self).__init__()        self.fc1 = nn.Linear(input_size, hidden_size)        self.relu = nn.ReLU()        self.fc2 = nn.Linear(hidden_size, output_size)        def forward(self, x):        x = self.fc1(x)        x = self.relu(x)        x = self.fc2(x)        return x# 示例输入数据input_data = torch.randn(1, input_size)  # 假设输入数据为 1xinput_size 的张量# 创建图签名模型input_size = 64  # 输入特征的维度hidden_size = 32  # 隐藏层的大小output_size = 10  # 输出特征的维度signature_model = GraphSignatureModel(input_size, hidden_size, output_size)# 使用模型计算图签名signature = signature_model(input_data)# 现在，signature 包含输入数据的签名表示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;图形签名函数（Graph Signature
Function）是一种数学函数，它用于将图形（graphs）中的结构信息转化为数值或向量表示，以便进行图形分析、比较和处理。图形可以是网络、社交关系图、分子结构图、地理信息图等各种复杂结构的抽象表示。图形签名函数的目标是将这</summary>
      
    
    
    
    <category term="temporal KG" scheme="http://suojifeng.xyz/categories/temporal-KG/"/>
    
    
    <category term="knowledgeGraphs" scheme="http://suojifeng.xyz/tags/knowledgeGraphs/"/>
    
    <category term="graph" scheme="http://suojifeng.xyz/tags/graph/"/>
    
  </entry>
  
  <entry>
    <title>evoExplore</title>
    <link href="http://suojifeng.xyz/2023/09/25/evoexplore/"/>
    <id>http://suojifeng.xyz/2023/09/25/evoexplore/</id>
    <published>2023-09-25T12:39:34.000Z</published>
    <updated>2023-09-25T13:02:01.246Z</updated>
    
    <content type="html"><![CDATA[<p>这篇也是讲述时序知识图谱推理的工作。</p><p>Temporal knowledge graph representation learning with local andglobal evolutions</p><p>关系的连续建立可以看作是离散的顺序事件</p><p>局部和全局的关系演化和建立</p><p>EvoExplore通过将历史解耦为实体和关系的相似性来避免压缩，并采用分层注意机制以细粒度的方式对历史信息进行建模。</p><figure><img src="/2023/09/25/evoexplore/notation%20and%20descriptions.jpg" alt="notation and descriptions"><figcaption aria-hidden="true">notation and descriptions</figcaption></figure><p>也是采用了Hawkes过程，在这里面用的还是比较多的。</p><p>EvoExplore的目标是通过联合建模其局部和全局结构演化及其相互影响来学习时间知识图的表示。</p><figure><img src="/2023/09/25/evoexplore/structure.jpg" alt="structure"><figcaption aria-hidden="true">structure</figcaption></figure><p>EvoExplore 将 TKG作为输入，并通过联合建模局部和全局图结构的演变来学习 TKG中实体和关系的表示。它由三个基本组件组成。如图 2所示，首先，为了对局部结构演化进行建模，我们通过时间点过程来表征关系建立，并提出了一种分层注意机制来学习历史事件对每个参与实体具有自适应重要性的影响（a）。然后，为了对全局结构演化进行建模，我们设计了一个软模块化作为度量来捕获TKG中的社区结构，同时考虑了社区演化的平滑性和TKG(b)的异质性。最后，我们通过随时间 (c) 联合预测关系建立和社区分区来优化EvoExplore，</p><h2 id="local-structure-evolution-modeling"><strong>Local structureevolution modeling</strong></h2><p>受时间点过程的启发，我们提出了一种新的基于层次注意力的时间点过程来建模TKG中每个关系的建立。</p><p>具体而言，给定一个时间事件（s，r，o，τ），表示在时间τ实体和o之间建立了关系r，我们遵循hawkes的策略，将相应的发生强度定义为<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.854ex;" xmlns="http://www.w3.org/2000/svg" width="39.711ex" height="5.121ex" role="img" focusable="false" viewbox="0 -1002 17552 2263.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"/></g><g data-mml-node="mo" transform="translate(291.5,584) translate(-250 0)"><path data-c="7E" d="M179 251Q164 251 151 245T131 234T111 215L97 227L83 238Q83 239 95 253T121 283T142 304Q165 318 187 318T253 300T320 282Q335 282 348 288T368 299T388 318L402 306L416 295Q375 236 344 222Q330 215 313 215Q292 215 248 233T179 251Z"/></g></g></g><g data-mml-node="TeXAtom" transform="translate(616,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(616,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(747,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g><g data-mml-node="mo" transform="translate(1537.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1926.2,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(2443.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3109.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msubsup" transform="translate(4165.7,0)"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"/></g><g data-mml-node="TeXAtom" transform="translate(636,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(636,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(747,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g><g data-mml-node="mo" transform="translate(5722.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(6111.9,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(6628.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(7240.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(8240.3,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="munder" transform="translate(8876,0)"><g data-mml-node="mo" transform="translate(5.9,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/></g><g data-mml-node="TeXAtom" transform="translate(0,-1050) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="TeXAtom" transform="translate(470,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(764,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="mi" transform="translate(1542,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g></g></g><g data-mml-node="msubsup" transform="translate(10498.5,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(510,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(510,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(747,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g><g data-mml-node="mo" transform="translate(11929.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(12318.7,0)"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="TeXAtom" transform="translate(470,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(13082.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(13471.7,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(13992.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(14381.7,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(15120.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(16121.1,0)"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="TeXAtom" transform="translate(470,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(16885,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(17274,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span> θ是一个权衡参数 g函数代表的是历史事件的影响</p><p>因为历史事件的影响应该随着时间的推移而减少，所以项k（τ-τi）=exp（-γ|τ-τi|）是一个具有可学习衰减率γ的时间衰减函数。</p><h3 id="base-rate."><strong>Base rate.</strong></h3><p>由于是否自发建立关系不仅与关系本身的语义有关，还与两个参与实体的语义有关。因此，我们基于关系和实体来计算时间事件的基本速率。</p><p>具体而言，受TransE的启发，我们认为，如果转换后的主体实体与对象实体相似，则时间事件的自发强度将很高。</p><p>因此，我们使用参数化内积运算来获得时间事件的基本速率（s，r，o，τ），如下<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.869ex;" xmlns="http://www.w3.org/2000/svg" width="25.546ex" height="2.872ex" role="img" focusable="false" viewbox="0 -885.3 11291.3 1269.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"/></g><g data-mml-node="TeXAtom" transform="translate(636,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(636,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(747,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g><g data-mml-node="mo" transform="translate(1557.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1946.2,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(2463.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3129.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msubsup" transform="translate(4185.7,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D42E" d="M40 442L134 446Q228 450 229 450H235V273V165Q235 90 238 74T254 52Q268 46 304 46H319Q352 46 380 67T419 121L420 123Q424 135 425 199Q425 201 425 207Q425 233 425 249V316Q425 354 423 363T410 376Q396 380 369 380H356V442L554 450V267Q554 84 556 79Q561 62 610 62H623V31Q623 0 622 0Q603 0 527 -3T432 -6Q431 -6 431 25V56L420 45Q373 6 332 -1Q313 -6 281 -6Q208 -6 165 14T109 87L107 98L106 230Q106 358 104 366Q96 380 50 380H37V442H40Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(672,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mi" transform="translate(517,0)"><path data-c="22A4" d="M55 642T55 648T59 659T66 666T71 668H708Q723 660 723 648T708 628H409V15Q402 2 391 0Q387 0 384 1T379 3T375 6T373 9T371 13T369 16V628H71Q70 628 67 630T59 637Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(672,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5823.4,0)"><g data-mml-node="mi"><path data-c="1D416" d="M915 686L1052 683Q1142 683 1157 686H1164V624H1073L957 320Q930 249 900 170T855 52T839 10Q834 0 826 -5Q821 -7 799 -7H792Q777 -7 772 -5T759 10Q759 11 748 39T716 122T676 228L594 442L512 228Q486 159 455 78Q433 19 428 9T416 -5Q411 -7 389 -7H379Q356 -7 349 10Q349 12 334 51T288 170T231 320L116 624H24V686H35Q44 683 183 683Q331 683 355 686H368V624H323Q278 624 278 623L437 207L499 369L561 531L526 624H434V686H445Q454 683 593 683Q741 683 765 686H778V624H733Q688 624 688 623L847 207Q848 207 927 415T1006 624H905V686H915Z"/></g></g><g data-mml-node="mo" transform="translate(7012.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msubsup" transform="translate(7401.4,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D42E" d="M40 442L134 446Q228 450 229 450H235V273V165Q235 90 238 74T254 52Q268 46 304 46H319Q352 46 380 67T419 121L420 123Q424 135 425 199Q425 201 425 207Q425 233 425 249V316Q425 354 423 363T410 376Q396 380 369 380H356V442L554 450V267Q554 84 556 79Q561 62 610 62H623V31Q623 0 622 0Q603 0 527 -3T432 -6Q431 -6 431 25V56L420 45Q373 6 332 -1Q313 -6 281 -6Q208 -6 165 14T109 87L107 98L106 230Q106 358 104 366Q96 380 50 380H37V442H40Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(672,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(672,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g></g></g><g data-mml-node="mo" transform="translate(8711.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(9711.4,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D433" d="M48 262Q48 264 54 349T60 436V444H252Q289 444 336 444T394 445Q441 445 450 441T459 418Q459 406 458 404Q456 399 327 229T194 55H237Q260 56 268 56T297 58T325 65T348 77T370 98T384 128T395 170Q400 197 400 216Q400 217 431 217H462V211Q461 208 453 108T444 6V0H245Q46 0 43 2Q32 7 32 28V33Q32 41 40 52T84 112Q129 170 164 217L298 393H256Q189 392 165 380Q124 360 115 303Q110 280 110 256Q110 254 79 254H48V262Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(544,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(10624.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(11013.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span> 其中W是一个测量相似度的矩阵</p><p>上面符号表格里面 存在u代表主客体的表示。</p><p>一个实体的连接策略会影响它与其他实体建立关系的可能性。</p><p>由于TKG中存在具有各种连接策略的不同实体，并且连接策略可能随着时间的推移而演变，因此我们获得每个实体e在时间τ的表示为<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.576ex;" xmlns="http://www.w3.org/2000/svg" width="34.84ex" height="2.273ex" role="img" focusable="false" viewbox="0 -750 15399.4 1004.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D42E" d="M40 442L134 446Q228 450 229 450H235V273V165Q235 90 238 74T254 52Q268 46 304 46H319Q352 46 380 67T419 121L420 123Q424 135 425 199Q425 201 425 207Q425 233 425 249V316Q425 354 423 363T410 376Q396 380 369 380H356V442L554 450V267Q554 84 556 79Q561 62 610 62H623V31Q623 0 622 0Q603 0 527 -3T432 -6Q431 -6 431 25V56L420 45Q373 6 332 -1Q313 -6 281 -6Q208 -6 165 14T109 87L107 98L106 230Q106 358 104 366Q96 380 50 380H37V442H40Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(672,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(672,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g><g data-mml-node="mo" transform="translate(1365.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2421.1,0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672,0)"/></g><g data-mml-node="mo" transform="translate(3649.1,0)"><path data-c="2061" d=""/></g><g data-mml-node="mo" transform="translate(3649.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(4038.1,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="TeXAtom" transform="translate(502,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g><g data-mml-node="mo" transform="translate(5141.9,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(5642.1,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(6159.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6770.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(7770.5,0)"><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(389,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(889,0)"/><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1445,0)"/></g><g data-mml-node="mo" transform="translate(9771.5,0)"><path data-c="2061" d=""/></g><g data-mml-node="mo" transform="translate(9771.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(10160.5,0)"><g data-mml-node="mi"><path data-c="1D74E" d="M532 367Q532 399 559 426T618 453Q645 453 668 430T691 357Q691 319 677 261T649 171Q640 149 626 125T586 68T521 14T438 -7Q401 -7 372 7T333 30T311 57Q246 -8 165 -8Q119 -8 82 19T30 102Q24 126 24 163V178Q24 210 37 255Q61 346 118 424Q141 451 161 451Q174 451 184 443T194 419Q194 402 179 387Q91 273 91 206Q91 159 122 138T189 117T281 145V173Q283 223 294 253Q304 276 323 289T364 303Q386 303 400 287T415 250Q415 219 385 157L378 144Q378 142 388 136T419 124T462 117Q522 117 566 165T610 255Q610 288 561 320Q532 337 532 367Z"/></g><g data-mml-node="TeXAtom" transform="translate(751,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g><g data-mml-node="mo" transform="translate(11513.3,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(12013.5,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(12530.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(13141.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(14141.9,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="TeXAtom" transform="translate(600,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g><g data-mml-node="mo" transform="translate(15121.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span>其中θe、ωe和Ve∈Rd是保持其连接策略的不同进化模式的实体特定向量。</p><p>同时上面的式子 用sinθ保存了 进化的周期性</p><p>我们使用tanh单调函数来保持非周期性的进化趋势，例如，一个人应该出生、结婚和死亡。</p><p>用Ve保留了一个实体的一些静态属性，例如一个人的性别或城市的位置。通过这种方式，获得的实体表示可以准确地描述每个时间戳下实体的不同连接策略，这促使有效地识别时间事件的自发发生。</p><h3 id="historys-influence."><strong>History's influence.</strong></h3><p>时间事件是否发生还取决于相关的历史事件，其中主体实体和对象实体的历史都有影响。<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.869ex;" xmlns="http://www.w3.org/2000/svg" width="26.599ex" height="2.566ex" role="img" focusable="false" viewbox="0 -750 11756.6 1134.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(510,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(510,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(747,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g><g data-mml-node="mo" transform="translate(1431.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(1820.2,0)"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="TeXAtom" transform="translate(470,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(2584.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3250.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(4306.7,0)"><g data-mml-node="mi"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(530,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(747,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(5733.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(6122.8,0)"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="TeXAtom" transform="translate(470,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(6886.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(7498,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(8498.2,0)"><g data-mml-node="mi"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(530,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(763,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(9936.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(10325.6,0)"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="TeXAtom" transform="translate(470,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(11089.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(11478.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span> 上面的两项包括带有实体的历史影响</p><p>每个实体的历史事件通过多种关系暴露给不同的实体，可以自然地被视为一种层次结构</p><figure><img src="/2023/09/25/evoexplore/hierarchical.jpg" alt="hierarchical"><figcaption aria-hidden="true">hierarchical</figcaption></figure><p>历史事件的影响可以自然地解耦为历史实体和当前目标实体之间的相似性，以及历史关系和当前目标关系之间的相似。</p><p>？？？？与当前事件具有更多相似实体和更相似关系的历史事件将更加重要。？？？？</p><p>将每个历史事件的影响量化为实体相似性，并提出了一种分层注意力机制来计算差异的不同重要性</p><p>发生强度与关系和实体的相似性成正比。形式上，我们将涉及实体e的历史事件的影响定义为</p><figure><img src="/2023/09/25/evoexplore/hisin.jpg" alt="hisin"><figcaption aria-hidden="true">hisin</figcaption></figure><p>R是实体在时间τi建立的一组关系，</p><p>是实体的集合，每个实体在时间τi与实体E建立关系</p><p>x是当前目标实体</p><p>实体相似度Q矩阵</p><p>其中包含两个注意力参数是用于分别基于关系的相似性和实体的相似性对历史事件的不同重要性进行建模的注意力得分</p><p>为了获得不同历史事件的不同重要性，我们首先关注关系，这些关系在很大程度上决定了历史事件与当前事件的相关性。</p><p>为了根据历史事件的关系对其重要性进行建模，我们将关系级别的注意力定义为：<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.512ex;" xmlns="http://www.w3.org/2000/svg" width="29.046ex" height="6.009ex" role="img" focusable="false" viewbox="0 -1545.3 12838.6 2655.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/></g><g data-mml-node="TeXAtom" transform="translate(673,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(451,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(729,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(281.1,3) translate(-250 0)"><path data-c="AF" d="M69 544V590H430V544H69Z"/></g></g></g></g></g><g data-mml-node="mo" transform="translate(1835.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(2890.9,0)"><g data-mml-node="mrow" transform="translate(2009.7,710)"><g data-mml-node="mi"><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"/><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(444,0)"/><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(972,0)"/></g><g data-mml-node="mo" transform="translate(1528,0)"><path data-c="2061" d=""/></g><g data-mml-node="mo" transform="translate(1528,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1917,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D433" d="M48 262Q48 264 54 349T60 436V444H252Q289 444 336 444T394 445Q441 445 450 441T459 418Q459 406 458 404Q456 399 327 229T194 55H237Q260 56 268 56T297 58T325 65T348 77T370 98T384 128T395 170Q400 197 400 216Q400 217 431 217H462V211Q461 208 453 108T444 6V0H245Q46 0 43 2Q32 7 32 28V33Q32 41 40 52T84 112Q129 170 164 217L298 393H256Q189 392 165 380Q124 360 115 303Q110 280 110 256Q110 254 79 254H48V262Z"/></g><g data-mml-node="TeXAtom" transform="translate(544,-156.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D42B" d="M405 293T374 293T324 312T305 361Q305 378 312 394Q315 397 315 399Q305 399 294 394T266 375T238 329T222 249Q221 241 221 149V62H308V0H298Q280 3 161 3Q47 3 38 0H29V62H98V210V303Q98 353 96 363T83 376Q69 380 42 380H29V442H32L118 446Q204 450 205 450H210V414L211 378Q247 449 315 449H321Q384 449 413 422T442 360Q442 332 424 313Z"/></g><g data-mml-node="mo" transform="translate(237,15) translate(-287.5 0)"><path data-c="AF" d="M80 540V607H494V540H80Z"/></g></g></g></g></g></g><g data-mml-node="mi" transform="translate(962.2,363) scale(0.707)"><path data-c="22A4" d="M55 642T55 648T59 659T66 666T71 668H708Q723 660 723 648T708 628H409V15Q402 2 391 0Q387 0 384 1T379 3T375 6T373 9T371 13T369 16V628H71Q70 628 67 630T59 637Z"/></g></g><g data-mml-node="msub" transform="translate(3479.3,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D415" d="M592 686H604Q615 685 631 685T666 684T700 684T724 683Q829 683 835 686H843V624H744L611 315Q584 254 546 165Q492 40 482 19T461 -6L460 -7H409Q398 -4 391 9Q385 20 257 315L124 624H25V686H36Q57 683 190 683Q340 683 364 686H377V624H289L384 403L480 185L492 212Q504 240 529 298T575 405L670 624H582V686H592Z"/><path data-c="1D433" d="M48 262Q48 264 54 349T60 436V444H252Q289 444 336 444T394 445Q441 445 450 441T459 418Q459 406 458 404Q456 399 327 229T194 55H237Q260 56 268 56T297 58T325 65T348 77T370 98T384 128T395 170Q400 197 400 216Q400 217 431 217H462V211Q461 208 453 108T444 6V0H245Q46 0 43 2Q32 7 32 28V33Q32 41 40 52T84 112Q129 170 164 217L298 393H256Q189 392 165 380Q124 360 115 303Q110 280 110 256Q110 254 79 254H48V262Z" transform="translate(869,0)"/></g></g><g data-mml-node="mi" transform="translate(1413,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(5261.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-721.3)"><g data-mml-node="munder"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(484,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g></g><g data-mml-node="mo" transform="translate(728.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="msubsup" transform="translate(1395.5,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="52" d="M37 475Q19 475 19 487Q19 503 35 530T83 589T180 647T327 682H374Q387 682 417 682T464 683Q519 683 559 679T642 663T708 625T731 557Q731 481 668 411T504 300Q506 296 512 286T528 257T553 202Q594 105 611 82Q635 47 665 47Q708 47 742 93Q758 113 786 128Q804 136 819 137Q837 137 837 125Q837 115 818 92T767 43T687 -2T589 -22Q549 -22 517 22T467 120T422 221T362 273Q346 273 346 287Q348 301 373 320T436 342Q437 342 446 343T462 345T481 348T504 353T527 362T553 375T577 393Q598 412 614 443T630 511Q630 545 613 566T541 600T393 614Q370 614 370 613L366 584Q349 446 311 307T243 96L213 25Q205 8 179 -7T132 -22Q125 -22 120 -18T117 -8Q117 -5 130 26T163 113T205 239T246 408T274 606V614Q273 614 259 613T231 609T198 602T163 588Q131 572 113 518Q102 502 80 490T37 475Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(881,578.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mi" transform="translate(470,-307.4)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mi" transform="translate(881,-138.9) scale(0.707)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g></g><g data-mml-node="mi" transform="translate(3383.2,0)"><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"/><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(444,0)"/><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(972,0)"/></g><g data-mml-node="mo" transform="translate(4911.2,0)"><path data-c="2061" d=""/></g><g data-mml-node="mo" transform="translate(4911.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(5300.2,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D433" d="M48 262Q48 264 54 349T60 436V444H252Q289 444 336 444T394 445Q441 445 450 441T459 418Q459 406 458 404Q456 399 327 229T194 55H237Q260 56 268 56T297 58T325 65T348 77T370 98T384 128T395 170Q400 197 400 216Q400 217 431 217H462V211Q461 208 453 108T444 6V0H245Q46 0 43 2Q32 7 32 28V33Q32 41 40 52T84 112Q129 170 164 217L298 393H256Q189 392 165 380Q124 360 115 303Q110 280 110 256Q110 254 79 254H48V262Z"/></g><g data-mml-node="TeXAtom" transform="translate(544,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D42B" d="M405 293T374 293T324 312T305 361Q305 378 312 394Q315 397 315 399Q305 399 294 394T266 375T238 329T222 249Q221 241 221 149V62H308V0H298Q280 3 161 3Q47 3 38 0H29V62H98V210V303Q98 353 96 363T83 376Q69 380 42 380H29V442H32L118 446Q204 450 205 450H210V414L211 378Q247 449 315 449H321Q384 449 413 422T442 360Q442 332 424 313Z"/></g><g data-mml-node="TeXAtom" transform="translate(507,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g></g></g></g></g><g data-mml-node="mi" transform="translate(1158.4,289) scale(0.707)"><path data-c="22A4" d="M55 642T55 648T59 659T66 666T71 668H708Q723 660 723 648T708 628H409V15Q402 2 391 0Q387 0 384 1T379 3T375 6T373 9T371 13T369 16V628H71Q70 628 67 630T59 637Z"/></g></g><g data-mml-node="msub" transform="translate(7058.7,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D415" d="M592 686H604Q615 685 631 685T666 684T700 684T724 683Q829 683 835 686H843V624H744L611 315Q584 254 546 165Q492 40 482 19T461 -6L460 -7H409Q398 -4 391 9Q385 20 257 315L124 624H25V686H36Q57 683 190 683Q340 683 364 686H377V624H289L384 403L480 185L492 212Q504 240 529 298T575 405L670 624H582V686H592Z"/><path data-c="1D433" d="M48 262Q48 264 54 349T60 436V444H252Q289 444 336 444T394 445Q441 445 450 441T459 418Q459 406 458 404Q456 399 327 229T194 55H237Q260 56 268 56T297 58T325 65T348 77T370 98T384 128T395 170Q400 197 400 216Q400 217 431 217H462V211Q461 208 453 108T444 6V0H245Q46 0 43 2Q32 7 32 28V33Q32 41 40 52T84 112Q129 170 164 217L298 393H256Q189 392 165 380Q124 360 115 303Q110 280 110 256Q110 254 79 254H48V262Z" transform="translate(869,0)"/></g></g><g data-mml-node="mi" transform="translate(1413,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(8840.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><rect width="9429.6" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(12560.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span>除了关系之外，还需要考虑实体，因为对于每个关系，一个实体可能通过它与其他各种实体进行交互，不同的实体将产生不同的重要性。</p><p>我们将与目标实体e具有相同关系的实体视为一个组，并将实体级别的注意力计算为β</p><h3 id="local-structure-evolution-prediction."><strong>Local structureevolution prediction.</strong></h3><p>我们可以获得每个关系建立事件的发生强度。</p><p>softplus函数 保证正值，或者指数函数</p><p>我们将实体s和o之间在时间τ建立关系的概率定义为 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.476ex;" xmlns="http://www.w3.org/2000/svg" width="40.339ex" height="6.082ex" role="img" focusable="false" viewbox="0 -1594.2 17830 2688.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(892,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(1361,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1805.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2256.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2701.3,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mo" transform="translate(3186.3,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3464.3,0)"><g data-mml-node="mi"><path data-c="49" d="M174 0H31Q-13 0 -21 2T-30 12Q-30 23 -17 36Q9 60 42 68L155 70Q187 102 214 179T257 333T302 491T366 610L369 614H305Q221 611 188 607T145 596T128 569Q119 543 94 529T47 512Q28 512 28 524Q28 527 32 539Q56 614 159 654Q218 678 312 682Q314 682 339 682T404 682T481 683H632Q642 678 642 671Q642 657 621 641T577 617Q570 615 507 614H444Q427 592 406 542Q382 478 355 366T310 209Q280 123 238 78L230 69H330Q442 70 442 74Q443 74 443 77T447 87T460 105Q490 134 527 137Q545 137 545 125Q545 120 542 112Q531 78 491 49T399 7Q379 2 360 2T174 0Z"/></g></g><g data-mml-node="mo" transform="translate(4106.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4495.3,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(5012.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5401.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6068.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(7123.9,0)"><g data-mml-node="mrow" transform="translate(3798,844.2)"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"/></g><g data-mml-node="TeXAtom" transform="translate(616,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(616,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(747,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g><g data-mml-node="mo" transform="translate(1537.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1926.2,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(2443.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="munder"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(466,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1133,0)"><g data-mml-node="mi"><path data-c="45" d="M144 470Q144 556 240 630T451 705Q564 705 564 637Q564 611 540 573Q529 559 505 547T464 534Q448 534 448 545Q448 552 455 562Q463 577 463 591Q463 600 462 604T456 616T436 627T400 635Q396 635 390 635T380 636Q291 636 258 568Q245 544 245 516Q245 463 290 438T391 410Q415 410 415 398Q415 392 407 380T376 356T326 341Q288 340 260 327Q218 311 187 276T143 208T130 151Q130 113 156 88T211 55T268 47Q349 47 403 125Q415 144 439 157T483 171Q499 171 499 160Q499 148 475 120T413 59T315 3T197 -22Q124 -22 77 14T30 105Q30 126 39 154T66 216T122 288T209 354L223 362Q144 400 144 470Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(2339,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msubsup" transform="translate(2728,0)"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"/></g><g data-mml-node="TeXAtom" transform="translate(616,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(616,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(466,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(744,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g></g></g><g data-mml-node="mo" transform="translate(4263,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4652,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(5169,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5780.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msubsup" transform="translate(6780.4,0)"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"/></g><g data-mml-node="TeXAtom" transform="translate(616,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(616,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(747,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g><g data-mml-node="mo" transform="translate(8304.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(8693.2,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(9210.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(9599.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><rect width="10188.2" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(17552,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span></p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.222ex;" xmlns="http://www.w3.org/2000/svg" width="35.225ex" height="5.371ex" role="img" focusable="false" viewbox="0 -950 15569.6 2374.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(723,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(778,0)"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(1222,0)"/><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(1722,0)"/></g></g></g></g><g data-mml-node="mo" transform="translate(2465,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(3520.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="munder" transform="translate(4465.4,0)"><g data-mml-node="mo" transform="translate(990.3,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/></g><g data-mml-node="TeXAtom" transform="translate(0,-1147.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(858,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1136,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1587,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1865,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mo" transform="translate(2350,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2628,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(3145,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3534,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4201,0)"><g data-mml-node="mi"><path data-c="49" d="M174 0H31Q-13 0 -21 2T-30 12Q-30 23 -17 36Q9 60 42 68L155 70Q187 102 214 179T257 333T302 491T366 610L369 614H305Q221 611 188 607T145 596T128 569Q119 543 94 529T47 512Q28 512 28 524Q28 527 32 539Q56 614 159 654Q218 678 312 682Q314 682 339 682T404 682T481 683H632Q642 678 642 671Q642 657 621 641T577 617Q570 615 507 614H444Q427 592 406 542Q382 478 355 366T310 209Q280 123 238 78L230 69H330Q442 70 442 74Q443 74 443 77T447 87T460 105Q490 134 527 137Q545 137 545 125Q545 120 542 112Q531 78 491 49T399 7Q379 2 360 2T174 0Z"/></g></g></g></g><g data-mml-node="mi" transform="translate(8056.6,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"/></g><g data-mml-node="mo" transform="translate(9334.6,0)"><path data-c="2061" d=""/></g><g data-mml-node="mi" transform="translate(9501.3,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(10004.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(10393.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(10862.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(11307,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(11758,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(12202.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mo" transform="translate(12687.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(12965.6,0)"><g data-mml-node="mi"><path data-c="49" d="M174 0H31Q-13 0 -21 2T-30 12Q-30 23 -17 36Q9 60 42 68L155 70Q187 102 214 179T257 333T302 491T366 610L369 614H305Q221 611 188 607T145 596T128 569Q119 543 94 529T47 512Q28 512 28 524Q28 527 32 539Q56 614 159 654Q218 678 312 682Q314 682 339 682T404 682T481 683H632Q642 678 642 671Q642 657 621 641T577 617Q570 615 507 614H444Q427 592 406 542Q382 478 355 366T310 209Q280 123 238 78L230 69H330Q442 70 442 74Q443 74 443 77T447 87T460 105Q490 134 527 137Q545 137 545 125Q545 120 542 112Q531 78 491 49T399 7Q379 2 360 2T174 0Z"/></g></g><g data-mml-node="mo" transform="translate(13607.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(13996.6,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g><g data-mml-node="mo" transform="translate(14513.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(14902.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(15291.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g></svg></mjx-container></span></p><p>对关系的连续建立进行建模有助于理解图结构如何演变的详细机制。因此，我们的框架以细粒度的方式有效地捕捉了时间知识图的进化本质。</p><h2 id="global-structure-evolution-modeling"><strong>Global structureevolution modeling</strong></h2><p>随着关系的不断建立，全局结构也在缓慢演变</p><p>结合全局结构的演变不仅有助于我们的框架探索实体的高阶演变趋势，而且有助于捕捉每个时间戳的全局结构依赖性。</p><p>时间知识图的全局结构演化视为其随时间演化的动态社区划分，并设计了一个软模块来对TKG中的社区结构进行建模。</p><p>模块性是一种用于描述复杂网络中社区划分质量的度量，其定义为社区中的边缘数量与所有节点对上的预期边缘数量之间的差异。<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="21.278ex" height="4.613ex" role="img" focusable="false" viewbox="0 -1342 9404.7 2039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"/></g><g data-mml-node="mo" transform="translate(1068.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(2124.6,0)"><g data-mml-node="mn" transform="translate(659,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><rect width="1578" height="60" x="120" y="220"/></g><g data-mml-node="mi" transform="translate(3942.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(4646.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(5097.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(5486.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D407" d="M400 0Q376 3 226 3Q75 3 51 0H39V62H147V624H39V686H51Q75 683 226 683Q376 683 400 686H412V624H304V388H595V624H487V686H499Q523 683 673 683Q824 683 848 686H860V624H752V62H860V0H848Q824 3 674 3Q523 3 499 0H487V62H595V326H304V62H412V0H400Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(933,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="22A4" d="M55 642T55 648T59 659T66 666T71 668H708Q723 660 723 648T708 628H409V15Q402 2 391 0Q387 0 384 1T379 3T375 6T373 9T371 13T369 16V628H71Q70 628 67 630T59 637Z"/></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7019.7,0)"><g data-mml-node="mi"><path data-c="1D401" d="M720 510Q720 476 704 448T665 404T619 377T580 362L564 359L583 356Q602 353 632 342T690 312Q712 292 725 276Q752 235 752 189V183Q752 160 741 125Q698 18 547 2Q543 1 288 0H39V62H147V624H39V686H264H409Q502 686 542 681T624 655Q720 607 720 510ZM563 513Q563 553 548 578T518 611T486 622Q479 624 385 624H293V382H375Q458 383 467 385Q563 405 563 513ZM590 192Q590 307 505 329Q504 330 503 330L398 331H293V62H391H400H444Q496 62 528 75T580 131Q590 155 590 192Z"/></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7837.7,0)"><g data-mml-node="mi"><path data-c="1D407" d="M400 0Q376 3 226 3Q75 3 51 0H39V62H147V624H39V686H51Q75 683 226 683Q376 683 400 686H412V624H304V388H595V624H487V686H499Q523 683 673 683Q824 683 848 686H860V624H752V62H860V0H848Q824 3 674 3Q523 3 499 0H487V62H595V326H304V62H412V0H400Z"/></g></g><g data-mml-node="mo" transform="translate(8737.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(9126.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span> m是网络中总共边的数量，</p><p>H表示社区分配矩阵，其中K是社区的总数，如果实体i属于社区K，则每个元素Hik设置为1，否则设置为0。</p><p>B是模块性矩阵，其中每个元素定义为 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="17.948ex" height="4.283ex" role="img" focusable="false" viewbox="0 -1196.2 7932.8 1893.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D401" d="M720 510Q720 476 704 448T665 404T619 377T580 362L564 359L583 356Q602 353 632 342T690 312Q712 292 725 276Q752 235 752 189V183Q752 160 741 125Q698 18 547 2Q543 1 288 0H39V62H147V624H39V686H264H409Q502 686 542 681T624 655Q720 607 720 510ZM563 513Q563 553 548 578T518 611T486 622Q479 624 385 624H293V382H375Q458 383 467 385Q563 405 563 513ZM590 192Q590 307 505 329Q504 330 503 330L398 331H293V62H391H400H444Q496 62 528 75T580 131Q590 155 590 192Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(851,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g><g data-mml-node="mo" transform="translate(1714.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2769.8,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D400" d="M296 0Q278 3 164 3Q58 3 49 0H40V62H92Q144 62 144 64Q388 682 397 689Q403 698 434 698Q463 698 471 689Q475 686 538 530T663 218L724 64Q724 62 776 62H828V0H817Q796 3 658 3Q509 3 485 0H472V62H517Q561 62 561 63L517 175H262L240 120Q218 65 217 64Q217 62 261 62H306V0H296ZM390 237L492 238L440 365Q390 491 388 491Q287 239 287 237H390Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(902,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g><g data-mml-node="mo" transform="translate(4479.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mfrac" transform="translate(5479.6,0)"><g data-mml-node="mrow" transform="translate(220,754.2)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"/></g><g data-mml-node="TeXAtom" transform="translate(550,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="msub" transform="translate(844,0)"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"/></g><g data-mml-node="TeXAtom" transform="translate(550,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g><g data-mml-node="mrow" transform="translate(398.6,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><rect width="1935.3" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(7654.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span>其中A是网络的邻接矩阵，ρi是节点i的阶。注意，如果边是随机放置的ρiρj/2m是节点i和j之间的期望边数。尽管模块化已被广泛用于对图中的社区进行建模，但它是为静态同构网络设计的。对于时间知识图，实体通过不同类型的关系连接，这导致不同的连接强度，并且图结构也随着时间的推移而变化，这导致每个时间戳的社区划分不同。</p><p>为了在时间知识图中适当地对社区进行建模，我们提出了一种新的软模块化。为了对实体之间变化的连接强度进行建模，我们首先将图的邻接矩阵替换为我们的连接强度矩阵，该矩阵是从一对实体之间的关系导出的。<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.414ex;" xmlns="http://www.w3.org/2000/svg" width="18.409ex" height="5.563ex" role="img" focusable="false" viewbox="0 -950 8137 2459"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D412" d="M64 493Q64 582 120 636T264 696H272Q280 697 285 697Q380 697 454 645L480 669Q484 672 488 676T495 683T500 688T504 691T508 693T511 695T514 696T517 697T522 697Q536 697 539 691T542 652V577Q542 557 542 532T543 500Q543 472 540 465T524 458H511H505Q489 458 485 461T479 478Q472 529 449 564T393 614T336 634T287 639Q228 639 203 610T177 544Q177 517 195 493T247 457Q253 454 343 436T475 391Q574 326 574 207V200Q574 163 559 120Q517 12 389 -9Q380 -10 346 -10Q308 -10 275 -5T221 7T184 22T160 35T151 40L126 17Q122 14 118 10T111 3T106 -2T102 -5T98 -7T95 -9T92 -10T89 -11T84 -11Q70 -11 67 -4T64 35V108Q64 128 64 153T63 185Q63 203 63 211T69 223T77 227T94 228H100Q118 228 122 225T126 205Q130 125 193 88T345 51Q408 51 434 82T460 157Q460 196 439 221T388 257Q384 259 305 276T221 295Q155 313 110 366T64 493Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(672,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(672,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g><g data-mml-node="mo" transform="translate(1535.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="munder" transform="translate(2590.8,0)"><g data-mml-node="mo" transform="translate(261.2,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/></g><g data-mml-node="TeXAtom" transform="translate(0,-1099.2) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(451,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="msubsup" transform="translate(1118,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="52" d="M37 475Q19 475 19 487Q19 503 35 530T83 589T180 647T327 682H374Q387 682 417 682T464 683Q519 683 559 679T642 663T708 625T731 557Q731 481 668 411T504 300Q506 296 512 286T528 257T553 202Q594 105 611 82Q635 47 665 47Q708 47 742 93Q758 113 786 128Q804 136 819 137Q837 137 837 125Q837 115 818 92T767 43T687 -2T589 -22Q549 -22 517 22T467 120T422 221T362 273Q346 273 346 287Q348 301 373 320T436 342Q437 342 446 343T462 345T481 348T504 353T527 362T553 375T577 393Q598 412 614 443T630 511Q630 545 613 566T541 600T393 614Q370 614 370 613L366 584Q349 446 311 307T243 96L213 25Q205 8 179 -7T132 -22Q125 -22 120 -18T117 -8Q117 -5 130 26T163 113T205 239T246 408T274 606V614Q273 614 259 613T231 609T198 602T163 588Q131 572 113 518Q102 502 80 490T37 475Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(881,362.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(881,-293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></g><g data-mml-node="mi" transform="translate(4723.9,0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"/></g><g data-mml-node="mo" transform="translate(5377.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msubsup" transform="translate(5766.9,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D433" d="M48 262Q48 264 54 349T60 436V444H252Q289 444 336 444T394 445Q441 445 450 441T459 418Q459 406 458 404Q456 399 327 229T194 55H237Q260 56 268 56T297 58T325 65T348 77T370 98T384 128T395 170Q400 197 400 216Q400 217 431 217H462V211Q461 208 453 108T444 6V0H245Q46 0 43 2Q32 7 32 28V33Q32 41 40 52T84 112Q129 170 164 217L298 393H256Q189 392 165 380Q124 360 115 303Q110 280 110 256Q110 254 79 254H48V262Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(544,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="22A4" d="M55 642T55 648T59 659T66 666T71 668H708Q723 660 723 648T708 628H409V15Q402 2 391 0Q387 0 384 1T379 3T375 6T373 9T371 13T369 16V628H71Q70 628 67 630T59 637Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(544,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6911,0)"><g data-mml-node="mi"><path data-c="1D41A" d="M64 349Q64 399 107 426T255 453Q346 453 402 423T473 341Q478 327 478 310T479 196V77Q493 63 529 62Q549 62 553 57T558 31Q558 9 552 5T514 0H497H481Q375 0 367 56L356 46Q300 -6 210 -6Q130 -6 81 30T32 121Q32 188 111 226T332 272H350V292Q350 313 348 327T337 361T306 391T248 402T194 399H189Q204 376 204 354Q204 327 187 306T134 284Q97 284 81 305T64 349ZM164 121Q164 89 186 67T238 45Q274 45 307 63T346 108L350 117V226H347Q248 218 206 189T164 121Z"/></g></g><g data-mml-node="mo" transform="translate(7470,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(7859,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span>其中Sτ是每个时间戳τ处的连接强度矩阵。i和j是两个相邻实体的索引。Rτi，j是在时间τ存在于实体i和实体j之间的关系集，a是用于测量每个关系的连接强度的学习向量。φ是一个激活函数。</p><p>在此基础上，我们首先分别处理每个时间戳处的图结构，对于每个时间戳τ，我们可以得到相应的软模块性矩阵Bτ，其中每个元素定义为<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="17.87ex" height="5.119ex" role="img" focusable="false" viewbox="0 -1565.6 7898.7 2262.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D401" d="M720 510Q720 476 704 448T665 404T619 377T580 362L564 359L583 356Q602 353 632 342T690 312Q712 292 725 276Q752 235 752 189V183Q752 160 741 125Q698 18 547 2Q543 1 288 0H39V62H147V624H39V686H264H409Q502 686 542 681T624 655Q720 607 720 510ZM563 513Q563 553 548 578T518 611T486 622Q479 624 385 624H293V382H375Q458 383 467 385Q563 405 563 513ZM590 192Q590 307 505 329Q504 330 503 330L398 331H293V62H391H400H444Q496 62 528 75T580 131Q590 155 590 192Z"/></g></g><g data-mml-node="mo" transform="translate(409,576) translate(-250 0)"><path data-c="7E" d="M179 251Q164 251 151 245T131 234T111 215L97 227L83 238Q83 239 95 253T121 283T142 304Q165 318 187 318T253 300T320 282Q335 282 348 288T368 299T388 318L402 306L416 295Q375 236 344 222Q330 215 313 215Q292 215 248 233T179 251Z"/></g></g></g><g data-mml-node="TeXAtom" transform="translate(851,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(851,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g><g data-mml-node="mo" transform="translate(1714.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msubsup" transform="translate(2769.8,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D412" d="M64 493Q64 582 120 636T264 696H272Q280 697 285 697Q380 697 454 645L480 669Q484 672 488 676T495 683T500 688T504 691T508 693T511 695T514 696T517 697T522 697Q536 697 539 691T542 652V577Q542 557 542 532T543 500Q543 472 540 465T524 458H511H505Q489 458 485 461T479 478Q472 529 449 564T393 614T336 634T287 639Q228 639 203 610T177 544Q177 517 195 493T247 457Q253 454 343 436T475 391Q574 326 574 207V200Q574 163 559 120Q517 12 389 -9Q380 -10 346 -10Q308 -10 275 -5T221 7T184 22T160 35T151 40L126 17Q122 14 118 10T111 3T106 -2T102 -5T98 -7T95 -9T92 -10T89 -11T84 -11Q70 -11 67 -4T64 35V108Q64 128 64 153T63 185Q63 203 63 211T69 223T77 227T94 228H100Q118 228 122 225T126 205Q130 125 193 88T345 51Q408 51 434 82T460 157Q460 196 439 221T388 257Q384 259 305 276T221 295Q155 313 110 366T64 493Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(672,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(672,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g><g data-mml-node="mo" transform="translate(4249.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mfrac" transform="translate(5249.6,0)"><g data-mml-node="mrow" transform="translate(220,897.8)"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"/></g><g data-mml-node="TeXAtom" transform="translate(550,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(550,-293.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="msubsup" transform="translate(965.6,0)"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"/></g><g data-mml-node="TeXAtom" transform="translate(550,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(550,-293.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g><g data-mml-node="mrow" transform="translate(272.3,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="msup" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(911,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"/></g></g></g></g><rect width="2131.1" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(7620.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span>其中，ρτi和ρτj分别是实体i和实体j在时间τ的度数。mτ是在时间τ时TKG中的边的总数。</p><p>我们可以获得一系列时间特定的软模，通过最大化这些时间特定的软件模，我们可以分别在每个时间戳对TKG社区进行建模。</p><p>上述软模块化需要为每个实体硬分配社区标签。然而，TKG中的每个实体可能同时属于几个共同体，例如，日本可能同时属于亚太经合组织共同体成员国和世贸组织共同体成员国。其次，TKG在不同时间戳的社区划分是不独立的，因此单独处理它们忽略了它们的时间相关性。</p><h2 id="joint-modeling"><strong>Joint modeling</strong></h2><p>由于局部和全局结构进化是相互依赖的，并且相互驱动时间知识图的进化，我们设计了一个多任务损失函数，通过联合预测TKG的关系建立和社区划分来学习实体和关系的表示，该函数由<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.669ex;" xmlns="http://www.w3.org/2000/svg" width="19.767ex" height="2.264ex" role="img" focusable="false" viewbox="0 -705 8737.2 1000.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/></g></g><g data-mml-node="mo" transform="translate(967.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2023.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(723,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(778,0)"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(1222,0)"/><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(1722,0)"/></g></g></g></g><g data-mml-node="mo" transform="translate(4433,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(5433.2,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"/></g><g data-mml-node="msub" transform="translate(5839.2,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(723,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"/><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(500,0)"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(778,0)"/><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(1278,0)"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(1834,0)"/><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2334,0)"/></g></g></g></g><g data-mml-node="mo" transform="translate(8459.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></span>我们使用采样技术来近似优化Llocal。具体来说，由于我们已经通过指数函数将发生强度转移到正数，因此时间事件发生的概率p（s，o，t|H（τ））实际上是应用于强度函数的softmax单位，可以通过负采样近似优化。负采样可以避免整个实体集的计算，从而有效地减少计算量。对于每个时间事件（s，r，o，τ），我们随机采样L个负实体，并为每个负实体生成两个负知识实例（e，r，o，τ）和（s，r，e，τ）。</p><p>其中σ（x）=exp（x）/（1+exp（x））是sigmoid函数。此外，由于历史事件序列的长度在很大程度上影响了强度函数的计算复杂度，我们固定了历史的最大长度h，只保留最近的历史事件，</p><p>此外，由于Lglobal可以很容易地通过梯度下降算法进行优化，我们采用随机梯度下降（SGD）来优化整体损失函数。在每次迭代中，我们对一小批时间事件进行采样以计算Llocal，并使用当前批中涉及的实体来计算Lglobal。它们都将用于在反向传播期间更新参数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇也是讲述时序知识图谱推理的工作。&lt;/p&gt;
&lt;p&gt;Temporal knowledge graph representation learning with local and
global evolutions&lt;/p&gt;
&lt;p&gt;关系的连续建立可以看作是离散的顺序事件</summary>
      
    
    
    
    <category term="temporal KG" scheme="http://suojifeng.xyz/categories/temporal-KG/"/>
    
    
    <category term="Hawkes过程" scheme="http://suojifeng.xyz/tags/Hawkes%E8%BF%87%E7%A8%8B/"/>
    
    <category term="knowledgeGraphs" scheme="http://suojifeng.xyz/tags/knowledgeGraphs/"/>
    
    <category term="TKGs" scheme="http://suojifeng.xyz/tags/TKGs/"/>
    
  </entry>
  
  <entry>
    <title>实体的连接策略</title>
    <link href="http://suojifeng.xyz/2023/09/25/shi-ti-de-lian-jie-ce-lue/"/>
    <id>http://suojifeng.xyz/2023/09/25/shi-ti-de-lian-jie-ce-lue/</id>
    <published>2023-09-25T12:35:59.000Z</published>
    <updated>2023-09-25T12:40:56.032Z</updated>
    
    <content type="html"><![CDATA[<p>说实话好久没有写了，最近有点忙没有更新，很抱歉。差不多有两周时间了，把攒的东西写一写，说实话最近的研究方向可能要换了，所以也是就当做是积累吧。</p><p>一个实体的连接策略会影响它与其他实体建立关系的可能性，因为连接策略决定了实体在知识图谱或网络中的位置和关联程度。以下是一些原因：</p><ol type="1"><li>邻居节点</li></ol><p>实体的连接策略决定了它的邻居节点是哪些实体。如果一个实体与某一类实体建立更多的连接，那么它与该类实体之间建立关系的可能性也会增加。例如，如果一个电影实体连接到多个演员实体，那么它与演员之间的关系可能性较大。</p><ol type="1"><li>关系类型</li></ol><p>连接策略还包括了实体与其他实体之间建立的具体关系类型。不同的连接关系类型可以表示不同的语义关联。如果一个实体与其他实体之间建立了多个不同类型的关系，它与这些实体之间建立更多关系的机会也会增加。</p><ol type="1"><li>连接强度</li></ol><p>连接策略还涉及到实体与邻居节点之间的连接强度。某些实体可能与其他实体之间建立强连接，而某些实体建立弱连接。强连接通常意味着更紧密的关联，可能性更高。</p><ol type="1"><li>上下文信息</li></ol><p>连接策略也可以涉及到实体在不同上下文中的连接方式。根据不同上下文，实体可以与不同类型的实体建立关系。例如，一个人在社交网络上的连接策略可能与他在职业网络上的连接策略不同，因此与不同类型的实体建立关系的可能性也不同。</p><ol type="1"><li>领域知识</li></ol><p>连接策略还受到领域知识的影响。根据领域特点和知识图谱的结构，实体可能会选择与某些实体建立更多的连接，以满足特定的信息需求或任务目标。</p><p>综上所述，一个实体的连接策略不仅影响了它与其他实体建立关系的可能性，还影响了这些关系的性质和强度。连接策略是知识图谱和网络分析中一个重要的概念，对于理解实体之间的关系和语义联系非常关键。在知识图谱构建和分析中，合理的连接策略设计可以帮助丰富知识图谱的内容，提高知识图谱的质量和实用性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;说实话好久没有写了，最近有点忙没有更新，很抱歉。差不多有两周时间了，把攒的东西写一写，说实话最近的研究方向可能要换了，所以也是就当做是积累吧。&lt;/p&gt;
&lt;p&gt;一个实体的连接策略会影响它与其他实体建立关系的可能性，因为连接策略决定了实体在知识图谱或网络中的位置和关联程度。以</summary>
      
    
    
    
    <category term="知识点" scheme="http://suojifeng.xyz/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="knowledgeGraphs" scheme="http://suojifeng.xyz/tags/knowledgeGraphs/"/>
    
  </entry>
  
</feed>
